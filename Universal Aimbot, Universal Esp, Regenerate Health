local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Universal Aimbot Hub",
   Icon = 0, 
   LoadingTitle = "Loading ...",
   LoadingSubtitle = "by: Bomzinho/Sx_Mods",
   Theme = "Default",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "BomTrial"
   },

   Discord = {
      Enabled = false, 
      Invite = "noinvitelink", 
      RememberJoins = true 
   },

   KeySystem = true,
   KeySettings = {
      Title = "Key System",
      Subtitle = "Key = BomTrial",
      Note = "Key is on Subtitle",
      FileName = "Bomtrial", 
      SaveKey = false,
      GrabKeyFromSite = false,
      Key = {"BomTrial"}
   }
})

local tab1 = Window:CreateTab("Aimbot", 4483362458) 
local tab2 = Window:CreateTab("ESP", 4483362458) 
local tab3 = Window:CreateTab("Descrições", 4483362458)

local SilentAimEnabled = false
local VisibleCheck = false
local FOV = 100
local FOVVisible = false
local FOVCircle = Drawing.new("Circle")
local targetPart = "HumanoidRootPart"
local isRGB = false
local TeamCheck = false
local espEnabled = false
local espColor = Color3.fromRGB(255, 255, 255)
local espIsRGB = false
local espThickness = 1
local espTransparency = 1
local espTeamColor = false

FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Visible = FOVVisible
FOVCircle.Filled = false

local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local function updateFOVPosition()
    local camera = workspace.CurrentCamera
    FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
end

local function isPlayerInFOV(player)
    if not player or not player.Character or not player.Character:FindFirstChild(targetPart) then
        return false
    end
    local camera = workspace.CurrentCamera
    local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)
    if not onScreen then
        return false
    end
    local fovPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - fovPos).Magnitude
    return distance <= FOV
end

local function isVisible(player)
    local rayOrigin = workspace.CurrentCamera.CFrame.Position
    local rayDirection = (player.Character[targetPart].Position - rayOrigin).Unit * (player.Character[targetPart].Position - rayOrigin).Magnitude

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return result and result.Instance:IsDescendantOf(player.Character)
end

local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = FOV

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(targetPart) then
            if (not VisibleCheck or (VisibleCheck and isVisible(player))) and (not TeamCheck or (TeamCheck and player.TeamColor ~= game.Players.LocalPlayer.TeamColor)) then
                local camera = workspace.CurrentCamera
                local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)

                if onScreen and isPlayerInFOV(player) then
                    local distance = (Vector2.new(screenPos.X, screenPos.Y) - FOVCircle.Position).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    return closestPlayer
end

local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[targetPart].Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

local function drawESP(targetPlayer)
    local espBox = Drawing.new("Square")
    espBox.Thickness = espThickness
    espBox.Filled = false
    espBox.Transparency = espTransparency
    espBox.Color = espColor

    RunService.RenderStepped:Connect(function()
        if espEnabled and SilentAimEnabled and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if not TeamCheck or (TeamCheck and targetPlayer.TeamColor ~= game.Players.LocalPlayer.TeamColor) then
                local rootPart = targetPlayer.Character.HumanoidRootPart
                local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    espBox.Size = Vector2.new(50, 50) -- Change this based on your need
                    espBox.Position = Vector2.new(screenPos.X - espBox.Size.X / 2, screenPos.Y - espBox.Size.Y / 2)
                    espBox.Color = espIsRGB and getRGBColor() or (espTeamColor and targetPlayer.TeamColor.Color or espColor)
                    espBox.Visible = true
                else
                    espBox.Visible = false
                end
            else
                espBox.Visible = false
            end
        else
            espBox.Visible = false
        end
    end)
end

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= LocalPlayer then
        drawESP(player)
        player.CharacterAdded:Connect(function()
            drawESP(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        drawESP(player)
        player.CharacterAdded:Connect(function()
            drawESP(player)
        end)
    end
end)

game:GetService("RunService").RenderStepped:Connect(function()
    if FOVVisible then
        updateFOVPosition()
    end

    if SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target then
            aimAt(target)
        end
    end

    if isRGB then
        FOVCircle.Color = getRGBColor()
    end
end)

local Toggle = tab1:CreateToggle({
    Name = "Check de Time",
    CurrentValue = false,
    Flag = "TeamCheck",
    Callback = function(Value)
        TeamCheck = Value
    end,
})

local Toggle = tab1:CreateToggle({
   Name = "Ativar Aimbot",
   CurrentValue = false,
   Flag = "Aimbot", 
   Callback = function(Value)
       SilentAimEnabled = Value
   end,
})

local Toggle = tab1:CreateToggle({
   Name = "Check de Visibilidade",
   CurrentValue = false,
   Flag = "VisibleCheck", 
   Callback = function(Value)
       VisibleCheck = Value
   end,
})

local Slider = tab1:CreateSlider({
    Name = "Tamanho Da Fov",
    Range = {0, 300},
    Increment = 1,
    Suffix = "Units",
    CurrentValue = 100,
    Flag = "FOVSlider", 
    Callback = function(value)
        if value >= 0 and value <= 300 then
            FOV = value
            FOVCircle.Radius = value
        else
            print("Please enter a value between 0 and 300.")
        end
    end,
})

local Slider = tab1:CreateSlider({
    Name = "Espessura da Fov",
    Range = {0, 5},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 1,
    Flag = "FOVThick", 
    Callback = function(value)
        if value >= 0 and value <= 5 then
            FOVCircle.Thickness = value
        else
            print("Please enter a value between 0 and 5.")
        end
    end,
})

local Slider = tab1:CreateSlider({
    Name = "Transparência da Fov",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 1,
    Flag = "FOVTranspa", 
    Callback = function(value)
        if value >= 0 and value <= 1 then
            FOVCircle.Transparency = value
        else
            print("Please enter a value between 0 and 1.")
        end
    end,
})

local Toggle = tab1:CreateToggle({
    Name = "Mostrar Fov",
    CurrentValue = false,
    Flag = "ShowFOV", 
    Callback = function(value)
        FOVVisible = value
        FOVCircle.Visible = value
    end,
})

local Toggle = tab1:CreateToggle({
    Name = "Ativar Preenchimento da Fov",
    CurrentValue = false,
    Flag = "FOVFill", 
    Callback = function(value)
        FOVCircle.Filled = value
    end,
})

local ToggleRGB = tab1:CreateToggle({
    Name = "Ativar Cor RGB",
    CurrentValue = false,
    Flag = "EnableRGBToggle", 
    Callback = function(Value)
        isRGB = Value
    end,
})

local ColorPicker = tab1:CreateColorPicker({
    Name = "Cor Do Fov",
    Color = Color3.fromRGB(255, 255, 255), 
    Flag = "FOVColorPicker", 
    Callback = function(value)
        if not isRGB then
            FOVCircle.Color = value
        end
    end,
})

local Dropdown = tab1:CreateDropdown({
    Name = "Atirar em",
    Options = {"Head", "HumanoidRootPart"},
    CurrentOption = {"HumanoidRootPart"}, 
    MultipleOptions = false,
    Flag = "AimTargetDropdown", 
    Callback = function(options)
        targetPart = options[1]
    end,
})

-- Tab 2: ESP
local Paragraph = tab2:CreateParagraph({
    Title = "ESP",
    Content = "O ESP (Extra Sensory Perception) é uma funcionalidade que permite aos jogadores verem seus oponentes através de obstáculos, desenhando caixas ao redor dos personagens inimigos para melhor percepção no jogo."
})

local Toggle = tab2:CreateToggle({
    Name = "Ativar ESP",
    CurrentValue = false,
    Flag = "ESPEnabled", 
    Callback = function(Value)
        espEnabled = Value
    end,
})

local Slider = tab2:CreateSlider({
    Name = "Espessura do ESP",
    Range = {0, 5},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 1,
    Flag = "ESPThickness", 
    Callback = function(value)
        if value >= 0 and value <= 5 then
            espThickness = value
        else
            print("Please enter a value between 0 and 5.")
        end
    end,
})

local Slider = tab2:CreateSlider({
    Name = "Transparência do ESP",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "Units",
    CurrentValue = 1,
    Flag = "ESPTransparency", 
    Callback = function(value)
        if value >= 0 and value <= 1 then
            espTransparency = value
        else
            print("Please enter a value between 0 and 1.")
        end
    end,
})

local ColorPicker = tab2:CreateColorPicker({
    Name = "Cor do ESP",
    Color = Color3.fromRGB(255, 255, 255), 
    Flag = "ESPColorPicker", 
    Callback = function(value)
        if not espIsRGB then
            espColor = value
        end
    end,
})

local ToggleRGB = tab2:CreateToggle({
    Name = "Ativar Cor RGB no ESP",
    CurrentValue = false,
    Flag = "EnableESP_RGB", 
    Callback = function(Value)
        espIsRGB = Value
    end,
})

local Toggle = tab2:CreateToggle({
    Name = "Ativar Cor do Time no ESP",
    CurrentValue = false,
    Flag = "ESPTeamColor", 
    Callback = function(Value)
        espTeamColor = Value
    end,
})

-- Tab 3: Descrições
local Paragraph = tab3:CreateParagraph({
    Title = "Aimbot",
    Content = "Um aimbot é uma ferramenta usada em jogos para ajudar os jogadores a mirar automaticamente em seus oponentes. Ele funciona detectando inimigos na tela e ajustando a mira do jogador para atingi-los com precisão."
})

local Paragraph = tab3:CreateParagraph({
    Title = "Check de Time",
    Content = "O Check de Time verifica se o jogador inimigo está no mesmo time que você, evitando que o aimbot mire em aliados. Isso é aplicável a todos os outros itens que você configurar para garantir que apenas inimigos sejam afetados."
})

local Paragraph = tab3:CreateParagraph({
    Title = "Check de Visibilidade",
    Content = "Check de Visibilidade é uma funcionalidade em jogos que verifica se um oponente está dentro da linha de visão direta do jogador. Isso ajuda a determinar se os adversários estão visíveis ou ocultos por obstáculos, permitindo estratégias mais precisas e eficazes durante o jogo."
})

local Paragraph = tab3:CreateParagraph({
    Title = "FOV do Aimbot",
    Content = "FOV (Field of View) do aimbot é a área em que o aimbot procura por alvos. É como um cone de visão onde o aimbot detecta e trava nos oponentes. Configurar a FOV permite ajustar a precisão e a área de atuação do aimbot."
})

local Paragraph = tab3:CreateParagraph({
    Title = "ESP",
    Content = "O ESP (Extra Sensory Perception) é uma funcionalidade que permite aos jogadores verem seus oponentes através de obstáculos, desenhando caixas ao redor dos personagens inimigos para melhor percepção no jogo."
})
