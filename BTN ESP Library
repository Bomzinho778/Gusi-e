local SilentAimEnabled = false
local WallCheckEnabled = true  -- Ativado por padrão
local HealthCheckEnabled = true  -- Health check ativado por padrão
_G.targetPart = "Head"

local function isVisible(target)
    if WallCheckEnabled then
        if not target or not target.Character or not target.Character:FindFirstChild(_G.targetPart) then
            return false
        end
        
        local camera = workspace.CurrentCamera
        local targetPartPos = target.Character[_G.targetPart].Position
        local rayOrigin = camera.CFrame.Position
        local rayDirection = (targetPartPos - rayOrigin).Unit * (targetPartPos - rayOrigin).Magnitude

        -- Criando parâmetros de Raycast
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}  -- Exclui o próprio jogador do raycast

        -- Realiza o Raycast
        local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

        -- Se houver colisão e a colisão não for com o próprio jogador, o alvo não está visível
        if raycastResult and raycastResult.Instance then
            if raycastResult.Instance:IsDescendantOf(target.Character) then
                return true
            else
                return false
            end
        end

        return true  -- Se não houver colisão, o alvo é considerado visível
    end
    return true  -- Se WallCheck não estiver ativado, sempre retorna true
end

local function getClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge
    local players = game.Players:GetPlayers()

    for _, player in pairs(players) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(_G.targetPart) then
            -- Verificando a saúde, se HealthCheckEnabled estiver ativado
            if HealthCheckEnabled then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid and humanoid.Health <= 0 then
                    continue
                end
            end

            -- Calculando a distância até o jogador
            local charPart = player.Character:FindFirstChild(_G.targetPart)
            if charPart then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - charPart.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end
    return closestPlayer
end

local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(_G.targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[_G.targetPart].Position
        -- Ajuste do CFrame da câmera para "mirar" no alvo
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if SilentAimEnabled then
        local target = getClosestPlayer()
        if target and isVisible(target) then  -- Verifique se o alvo está visível (sem obstáculos)
            aimAt(target)
        end
    end
end)

_G.TracerVisible = false  -- Defina como 'false' para desativar a visibilidade
_G.TracerThickness = 1.5
_G.TracerTransparency = 1
_G.TracerColor = Color3.new(1, 1, 1)  -- Cor do traço

_G.TracerFrom = "Bottom"  -- Posição de origem do traço (pode ser "Bottom", "Middle", ou "Top")

local camera = workspace.CurrentCamera
local lplr = game.Players.LocalPlayer

-- Função para determinar a origem do traço
local function getTracerFromPosition()
    if _G.TracerFrom == "Bottom" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)  -- Parte inferior da tela
    elseif _G.TracerFrom == "Middle" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)  -- Centro da tela
    elseif _G.TracerFrom == "Top" then
        return Vector2.new(camera.ViewportSize.X / 2, 0)  -- Parte superior da tela
    end
end

-- Função para criar o objeto de traço
local function createTracer()
    local Tracer = Drawing.new("Line")
    Tracer.Thickness = _G.TracerThickness
    Tracer.Transparency = _G.TracerTransparency
    Tracer.Color = _G.TracerColor
    return Tracer
end

-- Função para configurar o traço para cada jogador
local function setupPlayerTracer(player)
    local Tracer = createTracer()

    game:GetService("RunService").RenderStepped:Connect(function()
        -- Verificar se o jogador tem a parte HumanoidRootPart e se está vivo
        if player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.Humanoid.Health > 0 then
            -- Calcular a posição da HumanoidRootPart na tela
            local Vector, onScreen = camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)

            -- Verificar se o jogador está na tela
            if onScreen then
                -- Configura a origem do traço (Bottom, Middle, Top)
                Tracer.From = getTracerFromPosition()
                Tracer.To = Vector2.new(Vector.X, Vector.Y)

                -- Se TracerVisible for 'false', ainda desenha, mas não aparece na tela
                Tracer.Visible = _G.TracerVisible
            else
                -- Se o jogador não estiver visível na tela, o traço ainda será desenhado, mas invisível
                Tracer.Visible = false
            end
        else
            -- Caso o jogador não esteja vivo ou não tenha a parte HumanoidRootPart
            Tracer.Visible = false
        end
    end)
end

-- Configurar traços para todos os jogadores já no jogo
for _, player in pairs(game.Players:GetChildren()) do
    setupPlayerTracer(player)
end

-- Configurar traços para jogadores que entrarem no jogo
game.Players.PlayerAdded:Connect(function(player)
    setupPlayerTracer(player)
end)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "GM Hub",
    Icon = 0,
    LoadingTitle = "By Bomzinho",
    LoadingSubtitle = "Loading...",
    Theme = "Amethyst",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ESPP"
    },

    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },

    KeySystem = true,
    KeySettings = {
        Title = "GM Hub",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"yh76"}
    }
})

local Tab = Window:CreateTab("Randomizer", 4483362458)

Tab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "Enable Aimbot",
    Callback = function(Value)
        SilentAimEnabled = Value
    end,
})

Tab:CreateToggle({
    Name = "Enable WallCheck",
    CurrentValue = false,
    Flag = "Enable Aimbot",
    Callback = function(Value)
        WallCheckEnabled = Value
    end,
})

Tab:CreateToggle({
    Name = "Enable Esp Tracer",
    CurrentValue = false,
    Flag = "Enable Aimbot",
    Callback = function(Value)
        _G.TracerVisible = Value
    end,
})
