local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "ESP Configuration",
    Icon = 0, -- Sem ícone no topo
    LoadingTitle = "BOM_MODS_V2",
    LoadingSubtitle = "Carregando script...",
    Theme = "Default",

    ConfigurationSaving = {
        Enabled = true,
        FolderName = "ESP_Config",
        FileName = "Config"
    },

    Discord = {
        Enabled = true,
        Invite = "noinvitelink",
        RememberJoins = false
    },

    KeySystem = true, -- Sistema de chave ativado
    KeySettings = {
        Title = "BOM_MODS_V2",
        Subtitle = "Insira a chave para continuar",
        Note = "Use as chaves 1234 ou 4321.",
        FileName = "Key",
        SaveKey = true, -- Salva a chave no executor
        GrabKeyFromSite = false, -- Não buscar chave online
        Key = {"1234", "4321"} -- Lista de chaves válidas
    }
})

-- Script ESP


-- Variáveis Globais
local settings = {
    Enabled = false,
    FOV = 100,
    Smoothness = 0.2,
    WallCheck = true,
    TeamCheck = true,
    TargetPart = "Head",
    FOVColor = Color3.fromRGB(255, 0, 0),
    FOVTransparency = 1,
    FOVThickness = 1,
    FOVPosition = "Mouse" -- Opções: "Mouse" ou "Centro".
    FOVFilled = false
}

local circle = Drawing.new("Circle")
circle.Visible = false
circle.Radius = settings.FOV
circle.Thickness = settings.FOVThickness
circle.Color = settings.FOVColor
circle.Filled = settings.FOVFilled
circle.Transparency = settings.FOVTransparency

-- Função para atualizar o círculo
game:GetService("RunService").RenderStepped:Connect(function()
    local mouse = game.Players.LocalPlayer:GetMouse()
    if settings.FOVPosition == "Mouse" then
        circle.Position = Vector2.new(mouse.X, mouse.Y + 36) -- Centralizado no mouse
    else
        circle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2) -- Centro da tela
    end
    circle.Radius = settings.FOV
    circle.Color = settings.FOVColor
    circle.Thickness = settings.FOVThickness
    circle.Filled = settings.FOVFilled
    circle.Transparency = settings.FOVTransparency
    circle.Visible = settings.Enabled
end)

-- Função para encontrar o alvo mais próximo no FOV
local function getClosestPlayer()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local mouse = localPlayer:GetMouse()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local humanoid = player.Character.Humanoid

            if humanoid.Health <= 0 then
                continue
            end

            if player.Character:FindFirstChild(settings.TargetPart) then
                local targetPart = player.Character[settings.TargetPart]
                local screenPoint, onScreen = workspace.CurrentCamera:WorldToViewportPoint(targetPart.Position)

                if onScreen then
                    local fovDistance = (Vector2.new(screenPoint.X, screenPoint.Y) -
                        (settings.FOVPosition == "Mouse" and Vector2.new(mouse.X, mouse.Y) or
                        Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2))).Magnitude
                    local realDistance = (targetPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude

                    if fovDistance <= settings.FOV then
                        if settings.TeamCheck and game.Teams and player.Team == localPlayer.Team then
                            continue
                        end

                        if settings.WallCheck then
                            local ray = Ray.new(workspace.CurrentCamera.CFrame.Position, (targetPart.Position - workspace.CurrentCamera.CFrame.Position).unit * 1000)
                            local part = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character, workspace.CurrentCamera})

                            if part and part:IsDescendantOf(player.Character) then
                                if realDistance < shortestDistance then
                                    closestPlayer = player
                                    shortestDistance = realDistance
                                end
                            end
                        else
                            if realDistance < shortestDistance then
                                closestPlayer = player
                                shortestDistance = realDistance
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Função para mirar no jogador mais próximo
game:GetService("RunService").Stepped:Connect(function()
    if settings.Enabled then
        local target = getClosestPlayer()
        if target and target.Character and target.Character:FindFirstChild(settings.TargetPart) then
            local targetPart = target.Character[settings.TargetPart]
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(workspace.CurrentCamera.CFrame.Position, targetPart.Position), settings.Smoothness)
        end
    end
end)

-- GUI - Configurações
local Tab1 = Window:CreateTab("Aimbot", 4483345998)

Tab1:CreateToggle({
    Name = "Ativar Aimbot",
    CurrentValue = false,
    Callback = function(value)
        settings.Enabled = value
    end
})

Tab1:CreateSlider({
    Name = "FOV",
    Range = {50, 500},
    Increment = 1,
    CurrentValue = 100,
    Callback = function(value)
        settings.FOV = value
    end
})

Tab1:CreateSlider({
    Name = "Suavidade",
    Range = {0, 1},
    Increment = 0.01,
    CurrentValue = 0.2,
    Callback = function(value)
        settings.Smoothness = value
    end
})

Tab1:CreateToggle({
    Name = "Checar Paredes",
    CurrentValue = true,
    Callback = function(value)
        settings.WallCheck = value
    end
})

Tab1:CreateToggle({
    Name = "Checar Times",
    CurrentValue = true,
    Callback = function(value)
        settings.TeamCheck = value
    end
})

Tab1:CreateDropdown({
    Name = "Parte do Corpo",
    Options = {"Head", "Torso", "HumanoidRootPart"},
    CurrentOption = "Head",
    Callback = function(value)
        settings.TargetPart = value
    end
})

Tab1:CreateColorPicker({
    Name = "Cor do FOV",
    Color = Color3.fromRGB(255, 0, 0),
    Callback = function(value)
        settings.FOVColor = value
    end
})

Tab1:CreateDropdown({
    Name = "Posição do FOV",
    Options = {"Mouse", "Centro"},
    CurrentOption = "Mouse",
    Callback = function(value)
        settings.FOVPosition = value
    end
})

Tab1:CreateSlider({
    Name = "Espessura do FOV",
    Range = {1, 5},
    Increment = 0.1,
    CurrentValue = 1,
    Callback = function(value)
        settings.FOVThickness = value
    end
})

Tab1:CreateSlider({
    Name = "Transparência do FOV",
    Range = {0, 1},
    Increment = 0.1,
    CurrentValue = 1,
    Callback = function(value)
        settings.FOVTransparency = value
    end
})

Tab1:CreateToggle({
    Name = "FOV Preenchida",
    CurrentValue = false,
    Callback = function(value)
        settings.FOVFilled = value
    end
})


Rayfield:LoadConfiguration()
