-- Load Orion Library
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
local Window = OrionLib:MakeWindow({Name = "Bom_Hub_Aim_V5", HidePremium = true, SaveConfig = true, ConfigFolder = "SilentAimSettings"})

-- Create Tabs
local tab1 = Window:MakeTab({Name = "Aimbot", Icon = "rbxassetid://4483345998", PremiumOnly = false})
local tab2 = Window:MakeTab({Name = "ESP", Icon = "rbxassetid://4483345998", PremiumOnly = false})
local tab3 = Window:MakeTab({Name = "Others", Icon = "rbxassetid://4483345998", PremiumOnly = false})
local tab4 = Window:MakeTab({Name = "Credits", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- Add Paragraphs
tab1:AddParagraph("Aimbot", "The aimbot functionality allows players to automatically aim at their targets with high precision. This feature helps in gaining a competitive edge by enhancing aiming accuracy, ensuring that the player's aim snaps directly to the opponent's hitbox, usually the head or torso. The aimbot can be customized with different FOV sizes, colors, and target parts to suit the player's preferences.")
tab2:AddParagraph("ESP Box", "The ESP Box feature enables players to see the bounding boxes around other players. This visual enhancement helps identify the position and movement of opponents, even through walls and obstacles. The ESP Box can be personalized with various colors and an optional RGB animation for a dynamic visual experience.")
tab2:AddParagraph("ESP Line", "ESP Line provides a visual line that connects the player to their opponents, indicating the direction and distance of the targets. This feature aids in tracking enemy movement and positioning, offering a strategic advantage in gameplay. The ESP Line can be customized with different colors, including RGB animation.")
tab2:AddParagraph("Chams", "Chams is a visual modification that changes the appearance of player models, making them brightly colored and more visible. This feature helps in distinguishing opponents easily, especially in complex environments. Chams can be configured with a variety of colors and an RGB animation to enhance the visual effect.")
tab2:AddParagraph("Skeleton", "The Skeleton feature draws a stickman-like overlay on players, highlighting their limbs and joints. This visual aid helps in understanding the exact movements and positions of opponents, providing a clear view of their actions. The Skeleton can be customized with different colors and an RGB animation for a more dynamic display.")
tab3:AddParagraph("Attributes", "The Attributes section allows players to adjust various character attributes such as speed, jump height, and health. These settings can be modified to enhance the player's in-game performance and adaptability. Additionally, a reset button is available to revert all attributes to their default values.")
tab3:AddParagraph("Empty", "")

-- Aimbot Script
local SilentAimEnabled = false
local FOV = 100
local FOVVisible = false
local FOVCircle = Drawing.new("Circle")
local targetPart = "HumanoidRootPart"
local isRGB = false

FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Visible = FOVVisible
FOVCircle.Filled = false

local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local function updateFOVPosition()
    local camera = workspace.CurrentCamera
    FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
end

local function isPlayerInFOV(player)
    if not player or not player.Character or not player.Character:FindFirstChild(targetPart) then
        return false
    end
    local camera = workspace.CurrentCamera
    local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)
    if not onScreen then
        return false
    end
    local fovPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - fovPos).Magnitude
    return distance <= FOV
end

local function isVisible(player)
    local rayOrigin = workspace.CurrentCamera.CFrame.Position
    local rayDirection = (player.Character[targetPart].Position - rayOrigin).Unit * (player.Character[targetPart].Position - rayOrigin).Magnitude

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return result and result.Instance:IsDescendantOf(player.Character)
end

local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = FOV

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(targetPart) then
            local camera = workspace.CurrentCamera
            local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)

            if onScreen and isPlayerInFOV(player) and isVisible(player) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - FOVCircle.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[targetPart].Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if FOVVisible then
        updateFOVPosition()
    end

    if SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target then
            aimAt(target)
        else
            print("No target found in FOV")
        end
    end

    if isRGB then
        FOVCircle.Color = getRGBColor()
    end
end)

tab1:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(value)
        SilentAimEnabled = value
    end
})

tab1:AddTextbox({
    Name = "FOV Size",
    Default = "100",
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue and numericValue >= 0 and numericValue <= 300 then
            FOV = numericValue
            FOVCircle.Radius = numericValue
        else
            print("Please enter a value between 0 and 300.")
        end
    end
})

tab1:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(value)
        FOVVisible = value
        FOVCircle.Visible = value
    end
})

tab1:AddDropdown({
    Name = "FOV Color",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Brown", "Black", "Gray", "Lime", "Magenta", "Rose", "Violet", "Navy", "Olive", "Gold", "Silver", "Maroon", "Mint", "Coral", "Turquoise", "Chocolate", "Cream", "Teal", "Crimson", "Ruby", "Amber", "Jade", "Lavender", "RGB"},
    Default = "White",
    Callback = function(option)
        local colors = {
            White = Color3.new(1, 1, 1),
            Red = Color3.new(1, 0, 0),
            Green = Color3.new(0, 1, 0),
            Blue = Color3.new(0, 0, 1),
            Yellow = Color3.new(1, 1, 0),
            Purple = Color3.new(0.5, 0, 0.5),
            Orange = Color3.new(1, 0.5, 0),
            Cyan = Color3.new(0, 1, 1),
            Pink = Color3.new(1, 0.75, 0.8),
            Brown = Color3.new(0.65, 0.16, 0.16),
            Black = Color3.new(0, 0, 0),
            Gray = Color3.new(0.5, 0.5, 0.5),
            Lime = Color3.new(0, 1, 0),
            Magenta = Color3.new(1, 0, 1),
            Rose = Color3.new(1, 0.5, 0.5),
            Violet = Color3.new(0.93, 0.51, 0.93),
            Navy = Color3.new(0, 0, 0.5),
            Olive = Color3.new(0.5, 0.5, 0),
            Gold = Color3.new(1, 0.84, 0),
            Silver = Color3.new(0.75, 0.75, 0.75),
            Maroon = Color3.new(0.5, 0, 0),
            Mint = Color3.new(0.6, 1, 0.6),
            Coral = Color3.new(1, 0.5, 0.31),
            Turquoise = Color3.new(0.25, 0.88, 0.82),
            Chocolate = Color3.new(0.82, 0.41, 0.12),
            Cream = Color3.new(1, 0.99, 0.82),
            Teal = Color3.new(0, 0.5, 0.5),
            Crimson = Color3.new(0.86, 0.08, 0.24),
            Ruby = Color3.new(0.88, 0.07, 0.37),
            Amber = Color3.new(1, 0.75, 0),
            Jade = Color3.new(0, 0.66, 0.42),
            Lavender = Color3.new(0.9, 0.9, 0.98)
        }

        if option == "RGB" then
            isRGB = true
        else
            isRGB = false
            FOVCircle.Color = colors[option]
        end
    end
})

-- ESP Box Script
local espEnabled = false
local espColor = Color3.fromRGB(255, 255, 255) -- Default white
local espIsRGB = false

local function drawESP(targetPlayer)
    local espBox = Drawing.new("Square")
    espBox.Thickness = 1
    espBox.Filled = false
    espBox.Transparency = 1
    espBox.Color = espColor

    RunService.RenderStepped:Connect(function()
        if espEnabled and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = targetPlayer.Character.HumanoidRootPart
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
            if onScreen then
                espBox.Size = Vector2.new(50, 50) -- Change this based on your need
                espBox.Position = Vector2.new(screenPos.X - espBox.Size.X / 2, screenPos.Y - espBox.Size.Y / 2)
                espBox.Color = espIsRGB and getRGBColor() or espColor
                espBox.Visible = true
            else
                espBox.Visible = false
            end
        else
            espBox.Visible = false
        end
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        drawESP(player)
        player.CharacterAdded:Connect(function()
            drawESP(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        drawESP(player)
        player.CharacterAdded:Connect(function()
            drawESP(player)
        end)
    end
end)

tab2:AddToggle({
    Name = "Enable ESP Box",
    Default = espEnabled,
    Callback = function(state)
        espEnabled = state
    end
})

tab2:AddDropdown({
    Name = "ESP Box Color",
    Default = "White",
    Options = {
        "White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Brown", "Black",
        "Gray", "Lime", "Magenta", "Rose", "Violet", "Navy", "Olive", "Gold", "Silver", "Maroon",
        "Mint", "Coral", "Turquoise", "Chocolate", "Cream", "Teal", "Crimson", "Ruby", "Amber",
        "Jade", "Lavender", "RGB"
    },
    Callback = function(option)
        if option == "RGB" then
            espIsRGB = true
        else
            espIsRGB = false
            espColor = colors[option]
        end
    end
})

-- ESP Line Script
local lines = {}

local function createESPLine(player)
    local line = Drawing.new("Line")
    line.Color = espColor
    line.Thickness = 1
    line.Transparency = 1
    line.Visible = false

    lines[player] = line

    RunService.RenderStepped:Connect(function()
        if espEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
            if onScreen then
                line.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, 0)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Color = espIsRGB and getRGBColor() or espColor
                line.Visible = true
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
        createESPLine(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end)

tab2:AddToggle({
    Name = "Enable ESP Line",
    Default = espEnabled,
    Callback = function(state)
        espEnabled = state
        for _, line in pairs(lines) do
            line.Visible = state
        end
    end
})

tab2:AddDropdown({
    Name = "Line Color",
    Default = "Red",
    Options = {
        "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Cyan", "Magenta", "Gray", "Black", "White",
        "Silver", "Brown", "Dark Blue", "Dark Red", "Olive", "Light Yellow", "Pink", "Turquoise",
        "Burnt Orange", "Lime Green", "Lavender", "Light Gray", "RGB"
    },
    Callback = function(selected)
        espIsRGB = (selected == "RGB")
        local colorsMap = {
            ["Red"] = Color3.new(1, 0, 0),
            ["Green"] = Color3.new(0, 1, 0),
            ["Blue"] = Color3.new(0, 0, 1),
            ["Yellow"] = Color3.new(1, 1, 0),
            ["Orange"] = Color3.new(1, 0.5, 0),
            ["Purple"] = Color3.new(0.5, 0, 0.5),
            ["Cyan"] = Color3.new(0, 1, 1),
            ["Magenta"] = Color3.new(1, 0, 1),
            ["Gray"] = Color3.new(0.5, 0.5, 0.5),
            ["Black"] = Color3.new(0, 0, 0),
            ["White"] = Color3.new(1, 1, 1),
            ["Silver"] = Color3.new(0.75, 0.75, 0.75),
            ["Brown"] = Color3.new(0.65, 0.16, 0.16),
            ["Dark Blue"] = Color3.new(0.3, 0.3, 0.6),
            ["Dark Red"] = Color3.new(0.6, 0.2, 0.2),
            ["Olive"] = Color3.new(0.5, 0.5, 0.2),
            ["Light Yellow"] = Color3.new(0.8, 0.8, 0.2),
            ["Pink"] = Color3.new(1, 0.75, 0.8),
            ["Turquoise"] = Color3.new(0.25, 0.88, 0.82),
            ["Burnt Orange"] = Color3.new(0.8, 0.5, 0.2),
            ["Lime Green"] = Color3.new(0, 1, 0.2),
            ["Lavender"] = Color3.new(0.9, 0.9, 0.98),
            ["Light Gray"] = Color3.new(0.8, 0.8, 0.8)
        }
        if not espIsRGB then
            espColor = colorsMap[selected]
        end
    end
})

-- Chams Script
local chamsEnabled = false
local selectedColor = Color3.new(1, 0, 0) -- Initial color (red)
local isRGB = false

-- List of available colors for Chams
local chamsColors = {
    {Name = "Red", Color = Color3.new(1, 0, 0)},
    {Name = "Green", Color = Color3.new(0, 1, 0)},
    {Name = "Blue", Color = Color3.new(0, 0, 1)},
    {Name = "Yellow", Color = Color3.new(1, 1, 0)},
    {Name = "Purple", Color = Color3.new(0.5, 0, 0.5)},
    {Name = "Orange", Color = Color3.new(1, 0.5, 0)},
    {Name = "Cyan", Color = Color3.new(0, 1, 1)},
    {Name = "Magenta", Color = Color3.new(1, 0, 1)},
    {Name = "White", Color = Color3.new(1, 1, 1)},
    {Name = "Gray", Color = Color3.new(0.5, 0.5, 0.5)},
    {Name = "Black", Color = Color3.new(0, 0, 0)},
    {Name = "Brown", Color = Color3.new(0.65, 0.16, 0.16)},
    {Name = "Silver", Color = Color3.new(0.75, 0.75, 0.75)},
    {Name = "Pink", Color = Color3.new(1, 0.75, 0.8)},
    {Name = "Lime", Color = Color3.new(0, 1, 0)},
    {Name = "Violet", Color = Color3.new(0.93, 0.51, 0.93)},
    {Name = "Navy", Color = Color3.new(0, 0, 0.5)},
    {Name = "Olive", Color = Color3.new(0.5, 0.5, 0)},
    {Name = "Gold", Color = Color3.new(1, 0.84, 0)},
    {Name = "Mint", Color = Color3.new(0.6, 1, 0.6)},
    {Name = "Coral", Color = Color3.new(1, 0.5, 0.31)},
    {Name = "Turquoise", Color = Color3.new(0.25, 0.88, 0.82)},
    {Name = "Chocolate", Color = Color3.new(0.82, 0.41, 0.12)},
    {Name = "Cream", Color = Color3.new(1, 0.99, 0.82)},
    {Name = "Teal", Color = Color3.new(0, 0.5, 0.5)},
    {Name = "Crimson", Color = Color3.new(0.86, 0.08, 0.24)},
    {Name = "Ruby", Color = Color3.new(0.88, 0.07, 0.37)},
    {Name = "Amber", Color = Color3.new(1, 0.75, 0)},
    {Name = "Jade", Color = Color3.new(0, 0.66, 0.42)},
    {Name = "Lavender", Color = Color3.new(0.9, 0.9, 0.98)}
}

-- Function to toggle Chams on or off
local function toggleChams(state)
    chamsEnabled = state

    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            for _, part in pairs(player.Character:GetChildren()) do
                if part:IsA("BasePart") then
                    if chamsEnabled then
                        part.Color = isRGB and getRGBColor() or selectedColor
                        part.Material = Enum.Material.Neon
                    else
                        part.Material = Enum.Material.Plastic
                    end
                end
            end
        end
    end
end

tab2:AddToggle({
    Name = "Enable Chams",
    Default = chamsEnabled,
    Callback = function(state)
        toggleChams(state)
    end
})

tab2:AddDropdown({
    Name = "Choose Chams Color",
    Default = "Red",
    Options = {
        "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Magenta", "White", "Gray", "Black",
        "Brown", "Silver", "Pink", "Lime", "Violet", "Navy", "Olive", "Gold", "Mint", "Coral",
        "Turquoise", "Chocolate", "Cream", "Teal", "Crimson", "Ruby", "Amber", "Jade", "Lavender", "RGB"
    },
    Callback = function(selected)
        if selected == "RGB" then
            isRGB = true
        else
            isRGB = false
            for _, color in ipairs(chamsColors) do
                if color.Name == selected then
                    selectedColor = color.Color -- Atualizar a cor selecionada
                    break
                end
            end
        end

        -- Se o Chams estiver ativado, desativa e ativa novamente para aplicar a nova cor
        if chamsEnabled then
            toggleChams(false)
            toggleChams(true)
        end
    end
})

-- Skeleton Script
local skeletonEnabled = false
local skeletonColor = Color3.new(1, 0, 0) -- Initial color (red)
local skeletonIsRGB = false
local skeletonLines = {}

local function drawSkeleton(player)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Create lines for each part of the skeleton
    local parts = {
        head = character:FindFirstChild("Head"),
        torso = character:FindFirstChild("HumanoidRootPart"),
        leftArm = character:FindFirstChild("LeftUpperArm"),
        rightArm = character:FindFirstChild("RightUpperArm"),
        leftLeg = character:FindFirstChild("LeftUpperLeg"),
        rightLeg = character:FindFirstChild("RightUpperLeg")
    }
    
    if not (parts.head and parts.torso and parts.leftArm and parts.rightArm and parts.leftLeg and parts.rightLeg) then return end

    -- Initialize skeleton lines if not already done
    if not skeletonLines[player] then
        skeletonLines[player] = {
            headToTorso = Drawing.new("Line"),
            leftArm = Drawing.new("Line"),
            rightArm = Drawing.new("Line"),
            leftLeg = Drawing.new("Line"),
            rightLeg = Drawing.new("Line")
        }
    end
    
    local lines = skeletonLines[player]
    
    -- Function to update line positions
    local function updateLine(line, part1, part2)
        local screenPos1, onScreen1 = workspace.CurrentCamera:WorldToViewportPoint(part1.Position)
        local screenPos2, onScreen2 = workspace.CurrentCamera:WorldToViewportPoint(part2.Position)
        line.Visible = onScreen1 and onScreen2 and skeletonEnabled
        if line.Visible then
            line.From = Vector2.new(screenPos1.X, screenPos1.Y)
            line.To = Vector2.new(screenPos2.X, screenPos2.Y)
            line.Color = skeletonIsRGB and getRGBColor() or skeletonColor
            line.Thickness = 2
        end
    end

    -- Update positions of all lines in render loop
    RunService.RenderStepped:Connect(function()
        if player and player.Character then
            updateLine(lines.headToTorso, parts.head, parts.torso)
            updateLine(lines.leftArm, parts.torso, parts.leftArm)
            updateLine(lines.rightArm, parts.torso, parts.rightArm)
            updateLine(lines.leftLeg, parts.torso, parts.leftLeg)
            updateLine(lines.rightLeg, parts.torso, parts.rightLeg)
        else
            for _, line in pairs(lines) do
                line.Visible = false
            end
        end
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        drawSkeleton(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            drawSkeleton(player)
        end)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            drawSkeleton(player)
        end)
    end
end)

tab2:AddToggle({
    Name = "Enable Skeleton",
    Default = skeletonEnabled,
    Callback = function(state)
        skeletonEnabled = state
    end
})

tab2:AddDropdown({
    Name = "Skeleton Color",
    Default = "Red",
    Options = {
        "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Cyan", "Magenta", "Gray", "Black", "White",
        "Silver", "Brown", "Dark Blue", "Dark Red", "Olive", "Light Yellow", "Pink", "Turquoise",
        "Burnt Orange", "Lime Green", "Lavender", "Light Gray", "RGB"
    },
    Callback = function(selected)
        skeletonIsRGB = (selected == "RGB")
        local colorsMap = {
            ["Red"] = Color3.new(1, 0, 0),
            ["Green"] = Color3.new(0, 1, 0),
            ["Blue"] = Color3.new(0, 0, 1),
            ["Yellow"] = Color3.new(1, 1, 0),
            ["Orange"] = Color3.new(1, 0.5, 0),
            ["Purple"] = Color3.new(0.5, 0, 0.5),
            ["Cyan"] = Color3.new(0, 1, 1),
            ["Magenta"] = Color3.new(1, 0, 1),
            ["Gray"] = Color3.new(0.5, 0.5, 0.5),
            ["Black"] = Color3.new(0, 0, 0),
            ["White"] = Color3.new(1, 1, 1),
            ["Silver"] = Color3.new(0.75, 0.75, 0.75),
            ["Brown"] = Color3.new(0.65, 0.16, 0.16),
            ["Dark Blue"] = Color3.new(0.3, 0.3, 0.6),
            ["Dark Red"] = Color3.new(0.6, 0.2, 0.2),
            ["Olive"] = Color3.new(0.5, 0.5, 0.2),
            ["Light Yellow"] = Color3.new(0.8, 0.8, 0.2),
            ["Pink"] = Color3.new(1, 0.75, 0.8),
            ["Turquoise"] = Color3.new(0.25, 0.88, 0.82),
            ["Burnt Orange"] = Color3.new(0.8, 0.5, 0.2),
            ["Lime Green"] = Color3.new(0, 1, 0.2),
            ["Lavender"] = Color3.new(0.9, 0.9, 0.98),
            ["Light Gray"] = Color3.new(0.8, 0.8, 0.8)
        }
        if not skeletonIsRGB then
            skeletonColor = colorsMap[selected]
        end
    end
})

local function drawSkeleton(player)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Create lines for each part of the skeleton
    local parts = {
        head = character:FindFirstChild("Head"),
        torso = character:FindFirstChild("HumanoidRootPart"),
        leftArm = character:FindFirstChild("LeftUpperArm"),
        rightArm = character:FindFirstChild("RightUpperArm"),
        leftLeg = character:FindFirstChild("LeftUpperLeg"),
        rightLeg = character:FindFirstChild("RightUpperLeg")
    }
    
    if not (parts.head and parts.torso and parts.leftArm and parts.rightArm and parts.leftLeg and parts.rightLeg) then return end

    -- Initialize skeleton lines if not already done
    if not skeletonLines[player] then
        skeletonLines[player] = {
            headToTorso = Drawing.new("Line"),
            leftArm = Drawing.new("Line"),
            rightArm = Drawing.new("Line"),
            leftLeg = Drawing.new("Line"),
            rightLeg = Drawing.new("Line")
        }
    end
    
    local lines = skeletonLines[player]
    
    -- Function to update line positions
    local function updateLine(line, part1, part2)
        local screenPos1, onScreen1 = workspace.CurrentCamera:WorldToViewportPoint(part1.Position)
        local screenPos2, onScreen2 = workspace.CurrentCamera:WorldToViewportPoint(part2.Position)
        line.Visible = onScreen1 and onScreen2 and skeletonEnabled
        if line.Visible then
            line.From = Vector2.new(screenPos1.X, screenPos1.Y)
            line.To = Vector2.new(screenPos2.X, screenPos2.Y)
            line.Color = skeletonIsRGB and getRGBColor() or skeletonColor
            line.Thickness = 2
        end
    end

    -- Update positions of all lines in render loop
    RunService.RenderStepped:Connect(function()
        if player and player.Character then
            updateLine(lines.headToTorso, parts.head, parts.torso)
            updateLine(lines.leftArm, parts.torso, parts.leftArm)
            updateLine(lines.rightArm, parts.torso, parts.rightArm)
            updateLine(lines.leftLeg, parts.torso, parts.leftLeg)
            updateLine(lines.rightLeg, parts.torso, parts.rightLeg)
        else
            for _, line in pairs(lines) do
                line.Visible = false
            end
        end
    end)
end

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        drawSkeleton(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            drawSkeleton(player)
        end)
    end
end

game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            drawSkeleton(player)
        end)
    end
end)

tab2:AddToggle({
    Name = "Enable Skeleton",
    Default = skeletonEnabled,
    Callback = function(state)
        skeletonEnabled = state
    end
})

tab2:AddDropdown({
    Name = "Skeleton Color",
    Default = "Red",
    Options = {
        "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Cyan", "Magenta", "Gray", "Black", "White",
        "Silver", "Brown", "Dark Blue", "Dark Red", "Olive", "Light Yellow", "Pink", "Turquoise",
        "Burnt Orange", "Lime Green", "Lavender", "Light Gray", "RGB"
    },
    Callback = function(selected)
        skeletonIsRGB = (selected == "RGB")
        local colorsMap = {
            ["Red"] = Color3.new(1, 0, 0),
            ["Green"] = Color3.new(0, 1, 0),
            ["Blue"] = Color3.new(0, 0, 1),
            ["Yellow"] = Color3.new(1, 1, 0),
            ["Orange"] = Color3.new(1, 0.5, 0),
            ["Purple"] = Color3.new(0.5, 0, 0.5),
            ["Cyan"] = Color3.new(0, 1, 1),
            ["Magenta"] = Color3.new(1, 0, 1),
            ["Gray"] = Color3.new(0.5, 0.5, 0.5),
            ["Black"] = Color3.new(0, 0, 0),
            ["White"] = Color3.new(1, 1, 1),
            ["Silver"] = Color3.new(0.75, 0.75, 0.75),
            ["Brown"] = Color3.new(0.65, 0.16, 0.16),
            ["Dark Blue"] = Color3.new(0.3, 0.3, 0.6),
            ["Dark Red"] = Color3.new(0.6, 0.2, 0.2),
            ["Olive"] = Color3.new(0.5, 0.5, 0.2),
            ["Light Yellow"] = Color3.new(0.8, 0.8, 0.2),
            ["Pink"] = Color3.new(1, 0.75, 0.8),
            ["Turquoise"] = Color3.new(0.25, 0.88, 0.82),
            ["Burnt Orange"] = Color3.new(0.8, 0.5, 0.2),
            ["Lime Green"] = Color3.new(0, 1, 0.2),
            ["Lavender"] = Color3.new(0.9, 0.9, 0.98),
            ["Light Gray"] = Color3.new(0.8, 0.8, 0.8)
        }
        if not skeletonIsRGB then
            skeletonColor = colorsMap[selected]
        end
    end
})

-- Initialize Orion
OrionLib:Init()
