-- Aimbot Script
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
local Window = OrionLib:MakeWindow({Name = "Bom_Hub_Aim_V5", HidePremium = true, SaveConfig = true, ConfigFolder = "SilentAimSettings"})

local tab1 = Window:MakeTab({Name = "Aimbot", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- RGB Animation Function
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local SilentAimEnabled = false
local FOV = 100
local FOVVisible = false
local FOVCircle = Drawing.new("Circle")
local targetPart = "HumanoidRootPart"
local isRGB = false

FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Visible = FOVVisible
FOVCircle.Filled = false

local function updateFOVPosition()
    local camera = workspace.CurrentCamera
    FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
end

local function isPlayerInFOV(player)
    if not player or not player.Character or not player.Character:FindFirstChild(targetPart) then
        return false
    end
    local camera = workspace.CurrentCamera
    local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)
    if not onScreen then
        return false
    end
    local fovPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - fovPos).Magnitude
    return distance <= FOV
end

local function isVisible(player)
    local rayOrigin = workspace.CurrentCamera.CFrame.Position
    local rayDirection = (player.Character[targetPart].Position - rayOrigin).Unit * (player.Character[targetPart].Position - rayOrigin).Magnitude

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return result and result.Instance:IsDescendantOf(player.Character)
end

local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = FOV

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(targetPart) then
            local camera = workspace.CurrentCamera
            local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)

            if onScreen and isPlayerInFOV(player) and isVisible(player) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - FOVCircle.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[targetPart].Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if FOVVisible then
        updateFOVPosition()
    end

    if SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target then
            aimAt(target)
        end
    end

    if isRGB then
        FOVCircle.Color = getRGBColor()
    end
end)



tab1:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(value)
        SilentAimEnabled = value
    end
})

tab1:AddTextbox({
    Name = "FOV Size",
    Default = "100",
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue and numericValue >= 0 and numericValue <= 300 then
            FOV = numericValue
            FOVCircle.Radius = numericValue
        else
            print("Please enter a value between 0 and 300.")
        end
    end
})



tab1:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(value)
        FOVVisible = value
        FOVCircle.Visible = value
    end
})

tab1:AddDropdown({
    Name = "FOV Color",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Gray", "RGB"},
    Default = "White",
    Callback = function(option)
        isRGB = (option == "RGB")
        if not isRGB then
            local colors = {
                White = Color3.new(1, 1, 1),
                Red = Color3.new(1, 0, 0),
                Green = Color3.new(0, 1, 0),
                Blue = Color3.new(0, 0, 1),
                Yellow = Color3.new(1, 1, 0),
                Purple = Color3.new(0.5, 0, 0.5),
                Orange = Color3.new(1, 0.5, 0),
                Cyan = Color3.new(0, 1, 1),
                Pink = Color3.new(1, 0.75, 0.8),
                Gray = Color3.new(0.5, 0.5, 0.5)
            }
            FOVCircle.Color = colors[option]
        end
    end
})


tab1:AddDropdown({
    Name = "Target Part",
    Options = {"Head", "HumanoidRootPart"},
    Default = "HumanoidRootPart",
    Callback = function(option)
        targetPart = option
    end
})

-- ESP Box Script
local tab2 = Window:MakeTab({Name = "ESP", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- RGB Animation Function
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local espEnabled = false
local espColor = Color3.fromRGB(255, 255, 255) -- Default white
local isRGB = false

local function drawESP(targetPlayer)
    local espBox = Drawing.new("Square")
    espBox.Thickness = 1
    espBox.Filled = false
    espBox.Transparency = 1
    espBox.Visible = false

    RunService.RenderStepped:Connect(function()
        if espEnabled and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = targetPlayer.Character.HumanoidRootPart
            local head = targetPlayer.Character:FindFirstChild("Head")

            if humanoidRootPart and head then
                local rootPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position)
                local headPos, _ = workspace.CurrentCamera:WorldToViewportPoint(head.Position)
                local distance = (headPos - rootPos).magnitude

                if onScreen then
                    espBox.Size = Vector2.new(distance * 2, distance * 3)
                    espBox.Position = Vector2.new(rootPos.X - espBox.Size.X / 2, rootPos.Y - espBox.Size.Y / 2)
                    espBox.Color = isRGB and getRGBColor() or espColor
                    espBox.Visible = true
                else
                    espBox.Visible = false
                end
            else
                espBox.Visible = false
            end
        else
            espBox.Visible = false
        end
    end)
end

local function addESPToPlayer(player)
    if player.Character then
        drawESP(player)
    end
    player.CharacterAdded:Connect(function()
        drawESP(player)
    end)
end

for _, targetPlayer in pairs(Players:GetPlayers()) do
    if targetPlayer ~= LocalPlayer then
        addESPToPlayer(targetPlayer)
    end
end

Players.PlayerAdded:Connect(addESPToPlayer)



tab2:AddToggle({
    Name = "Enable ESP Box",
    Default = espEnabled,
    Callback = function(state)
        espEnabled = state
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                addESPToPlayer(player)
            end
        end
    end
})

tab2:AddDropdown({
    Name = "ESP Box Color",
    Default = "White",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Gray", "RGB"},
    Callback = function(option)
        isRGB = (option == "RGB")
        if not isRGB then
            local colors = {
                ["White"] = Color3.new(1, 1, 1),
                ["Red"] = Color3.new(1, 0, 0),
                ["Green"] = Color3.new(0, 1, 0),
                ["Blue"] = Color3.new(0, 0, 1),
                ["Yellow"] = Color3.new(1, 1, 0),
                ["Purple"] = Color3.new(0.5, 0, 0.5),
                ["Orange"] = Color3.new(1, 0.5, 0),
                ["Cyan"] = Color3.new(0, 1, 1),
                ["Pink"] = Color3.new(1, 0.75, 0.8),
                ["Gray"] = Color3.new(0.5, 0.5, 0.5)
            }
            espColor = colors[option]
        end
    end
})

-- ESP Line Script
local tab2 = Window:MakeTab({Name = "ESP Line", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local espLineEnabled = false
local espLineColor = Color3.new(1, 0, 0) -- Initial color (red)
local espLineIsRGB = false
local lines = {}

-- RGB Animation Function
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local function createESPLine(player)
    local line = Drawing.new("Line")
    line.Color = espLineColor
    line.Thickness = 1
    line.Transparency = 1
    line.Visible = false

    lines[player] = line

    RunService.RenderStepped:Connect(function()
        if espLineEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)

            if onScreen then
                line.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, 0)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Color = espLineIsRGB and getRGBColor() or espLineColor
                line.Visible = true
            else
                line.Visible = false
            end
        else
            line.Visible = false
        end
    end)
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end)

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
        createESPLine(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end



tab2:AddToggle({
    Name = "Enable ESP Line",
    Default = espLineEnabled,
    Callback = function(state)
        espLineEnabled = state
        for _, line in pairs(lines) do
            line.Visible = state
        end
    end
})

tab2:AddDropdown({
    Name = "ESP Line Color",
    Default = "Red",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Gray", "RGB"},
    Callback = function(option)
        espLineIsRGB = (option == "RGB")
        if not espLineIsRGB then
            local colors = {
                ["White"] = Color3.new(1, 1, 1),
                ["Red"] = Color3.new(1, 0, 0),
                ["Green"] = Color3.new(0, 1, 0),
                ["Blue"] = Color3.new(0, 0, 1),
                ["Yellow"] = Color3.new(1, 1, 0),
                ["Purple"] = Color3.new(0.5, 0, 0.5),
                ["Orange"] = Color3.new(1, 0.5, 0),
                ["Cyan"] = Color3.new(0, 1, 1),
                ["Pink"] = Color3.new(1, 0.75, 0.8),
                ["Gray"] = Color3.new(0.5, 0.5, 0.5)
            }
            espLineColor = colors[option]
        end
    end
})

-- Chams Script
local tab2 = Window:MakeTab({Name = "Chams", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local chamsEnabled = false
local chamsLoop
local selectedColor = Color3.new(1, 0, 0) -- Initial color (red)
local isRGB = false

-- RGB Animation Function
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

-- List of available colors for Chams
local chamsColors = {
    {Name = "White", Color = Color3.new(1, 1, 1)},
    {Name = "Red", Color = Color3.new(1, 0, 0)},
    {Name = "Green", Color = Color3.new(0, 1, 0)},
    {Name = "Blue", Color = Color3.new(0, 0, 1)},
    {Name = "Yellow", Color = Color3.new(1, 1, 0)},
    {Name = "Purple", Color = Color3.new(0.5, 0, 0.5)},
    {Name = "Orange", Color = Color3.new(1, 0.5, 0)},
    {Name = "Cyan", Color = Color3.new(0, 1, 1)},
    {Name = "Pink", Color = Color3.new(1, 0.75, 0.8)},
    {Name = "Gray", Color = Color3.new(0.5, 0.5, 0.5)}
}

local function applyChams(player)
    if player ~= LocalPlayer and player.Character and not player.Character:FindFirstChild("Chams") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Chams"
        highlight.FillColor = selectedColor
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 1
        highlight.Parent = player.Character
    end
end

local function toggleChams(state)
    if state then
        chamsLoop = coroutine.wrap(function()
            while chamsEnabled do
                for _, player in pairs(Players:GetPlayers()) do
                    applyChams(player)
                    if isRGB then
                        selectedColor = getRGBColor()
                    end
                end
                wait(0.25)
            end
        end)
        chamsLoop()
    else
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Chams") then
                player.Character.Chams:Destroy()
            end
        end
    end
}



tab2:AddToggle({
    Name = "Chams",
    Default = chamsEnabled,
    Callback = function(state)
        chamsEnabled = state
        toggleChams(state)
    end
})

tab2:AddDropdown({
    Name = "Chams Color",
    Default = chamsColors[1].Name,
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Gray", "RGB"},
    Callback = function(option)
        isRGB = (option == "RGB")
        for _, color in pairs(chamsColors) do
            if color.Name == option then
                selectedColor = color.Color
                break
            end
        end

        if chamsEnabled then
            toggleChams(false)
            toggleChams(true)
        end
    end
})

-- Stickman Script
local tab2 = Window:MakeTab({Name = "Stickman", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local stickmanEnabled = false
local stickmanColor = Color3.new(1, 0, 0) -- Initial color (red)
local isRGB = false
local stickmen = {}

-- RGB Animation Function
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

-- List of available colors
local colors = {
    ["White"] = Color3.new(1, 1, 1),
    ["Red"] = Color3.new(1, 0, 0),
    ["Green"] = Color3.new(0, 1, 0),
    ["Blue"] = Color3.new(0, 0, 1),
    ["Yellow"] = Color3.new(1, 1, 0),
    ["Purple"] = Color3.new(0.5, 0, 0.5),
    ["Orange"] = Color3.new(1, 0.5, 0),
    ["Cyan"] = Color3.new(0, 1, 1),
    ["Pink"] = Color3.new(1, 0.75, 0.8),
    ["Gray"] = Color3.new(0.5, 0.5, 0.5)
}

local function drawStickman(player)
    local stickman = {
        Head = Drawing.new("Circle"),
        Body = Drawing.new("Line"),
        LeftArm = Drawing.new("Line"),
        RightArm = Drawing.new("Line"),
        LeftLeg = Drawing.new("Line"),
        RightLeg = Drawing.new("Line")
    }

    for _, part in pairs(stickman) do
        part.Color = stickmanColor
        part.Thickness = 2
        part.Transparency = 1
        part.Visible = false
    end

    stickmen[player] = stickman

    RunService.RenderStepped:Connect(function()
        if stickmanEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character.HumanoidRootPart
            local head = player.Character:FindFirstChild("Head")
            local leftArm = player.Character:FindFirstChild("Left Arm")
            local rightArm = player.Character:FindFirstChild("Right Arm")
            local leftLeg = player.Character:FindFirstChild("Left Leg")
            local rightLeg = player.Character:FindFirstChild("Right Leg")

            if head and leftArm and rightArm and leftLeg and rightLeg then
                local headPos, onScreen1 = workspace.CurrentCamera:WorldToViewportPoint(head.Position)
                local bodyPos, onScreen2 = workspace.CurrentCamera:WorldToViewportPoint(humanoidRootPart.Position)
                local leftArmPos, onScreen3 = workspace.CurrentCamera:WorldToViewportPoint(leftArm.Position)
                local rightArmPos, onScreen4 = workspace.CurrentCamera:WorldToViewportPoint(rightArm.Position)
                local leftLegPos, onScreen5 = workspace.CurrentCamera:WorldToViewportPoint(leftLeg.Position)
                local rightLegPos, onScreen6 = workspace.CurrentCamera:WorldToViewportPoint(rightLeg.Position)

                if onScreen1 and onScreen2 and onScreen3 and onScreen4 and onScreen5 and onScreen6 then
                    stickman.Head.Position = Vector2.new(headPos.X, headPos.Y)
                    stickman.Head.Radius = 4
                    stickman.Head.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.Head.Visible = true

                    stickman.Body.From = Vector2.new(bodyPos.X, bodyPos.Y)
                    stickman.Body.To = Vector2.new(headPos.X, headPos.Y)
                    stickman.Body.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.Body.Visible = true

                    stickman.LeftArm.From = Vector2.new(bodyPos.X, bodyPos.Y)
                    stickman.LeftArm.To = Vector2.new(leftArmPos.X, leftArmPos.Y)
                    stickman.LeftArm.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.LeftArm.Visible = true

                    stickman.RightArm.From = Vector2.new(bodyPos.X, bodyPos.Y)
                    stickman.RightArm.To = Vector2.new(rightArmPos.X, rightArmPos.Y)
                    stickman.RightArm.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.RightArm.Visible = true

                    stickman.LeftLeg.From = Vector2.new(bodyPos.X, bodyPos.Y)
                    stickman.LeftLeg.To = Vector2.new(leftLegPos.X, leftLegPos.Y)
                    stickman.LeftLeg.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.LeftLeg.Visible = true

                    stickman.RightLeg.From = Vector2.new(bodyPos.X, bodyPos.Y)
                    stickman.RightLeg.To = Vector2.new(rightLegPos.X, rightLegPos.Y)
                    stickman.RightLeg.Color = isRGB and getRGBColor() or stickmanColor
                    stickman.RightLeg.Visible = true
                else
                    for _, part in pairs(stickman) do
                        part.Visible = false
                    end
                end
            else
                for _, part in pairs(stickman) do
                    part.Visible = false
                end
            end
        else
            for _, part in pairs(stickman) do
                part.Visible = false
            end
        end
    end)
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            drawStickman(player)
        end)
    end
end)

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
        drawStickman(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            drawStickman(player)
        end)
    end
end



tab2:AddToggle({
    Name = "Enable Skeleton",
    Default = stickmanEnabled,
    Callback = function(state)
        stickmanEnabled = state
        for _, stickman in pairs(stickmen) do
            for _, part in pairs(stickman) do
                part.Visible = state
            end
        end
    end
})

tab2:AddDropdown({
    Name = "Skeleton Color",
    Default = "Red",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Gray", "RGB"},
    Callback = function(option)
        isRGB = (option == "RGB")
        if not isRGB then
            stickmanColor = colors[option]
        end
    end
})



-- Invisibility Script


local invisibilityEnabled = false

local function toggleInvisibility(state)
    if game.Players.LocalPlayer.Character then
        for _, part in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if part:IsA("BasePart") or part:IsA("MeshPart") then
                part.Transparency = state and 1 or 0
                part.CanCollide = not state
            elseif part:IsA("Accessory") then
                if part:FindFirstChild("Handle") then
                    part.Handle.Transparency = state and 1 or 0
                    part.Handle.CanCollide = not state
                end
            elseif part:IsA("Decal") or part:IsA("Texture") then
                part.Transparency = state and 1 or 0
            end
        end
    end
end


-- Add Tab3 for Player Speed, Jump Height, Health adjustments, and Reset Button
local tab3 = Window:MakeTab({Name = "Others", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- Variables to store the speed, jump height, and health values
local playerSpeed = 16
local jumpHeight = 50
local playerHealth = 100

-- Function to update player's speed
local function updatePlayerSpeed()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = playerSpeed
    end
end

-- Function to update player's jump height
local function updateJumpHeight()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumpHeight
    end
end

-- Function to update player's health
local function updatePlayerHealth()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        game.Players.LocalPlayer.Character.Humanoid.Health = playerHealth
        game.Players.LocalPlayer.Character.Humanoid.MaxHealth = playerHealth
    end
end

-- Function to reset player's attributes
local function resetPlayerAttributes()
    playerSpeed = 16
    jumpHeight = 50
    playerHealth = 100
    updatePlayerSpeed()
    updateJumpHeight()
    updatePlayerHealth()
end

-- Add Textbox for player speed
tab3:AddTextbox({
    Name = "Player Speed",
    Default = tostring(playerSpeed),
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue then
            playerSpeed = numericValue
            updatePlayerSpeed()
        else
            print("Please enter a valid number.")
        end
    end
})

-- Add Textbox for jump height
tab3:AddTextbox({
    Name = "Jump Height",
    Default = tostring(jumpHeight),
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue then
            jumpHeight = numericValue
            updateJumpHeight()
        else
            print("Please enter a valid number.")
        end
    end
})

-- Add Textbox for player health
tab3:AddTextbox({
    Name = "Player Health",
    Default = tostring(playerHealth),
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue then
            playerHealth = numericValue
            updatePlayerHealth()
        else
            print("Please enter a valid number.")
        end
    end
})

-- Add Button for resetting player attributes
tab3:AddButton({
    Name = "Reset Attributes",
    Callback = function()
        resetPlayerAttributes()
    end
})

-- Update player's speed, jump height, and health when the script runs
updatePlayerSpeed()
updateJumpHeight()
updatePlayerHealth()

tab3:AddToggle({
    Name = "Invisibility",
    Default = invisibilityEnabled,
    Callback = function(state)
        invisibilityEnabled = state
        toggleInvisibility(state)
    end
})

-- Creators Script

tab3:AddLabel("Creators")

tab3:AddLabel("Bomzinho")
tab3:AddLabel("ChatGPT")
tab3:AddLabel("Copilot")
