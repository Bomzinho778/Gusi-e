-- Carregar a biblioteca Orion
local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
local Window = OrionLib:MakeWindow({Name = "Bom_Hub_Aim_V5", HidePremium = true, SaveConfig = true, ConfigFolder = "SilentAimSettings"})

-- Configurar a aba principal
local tab1 = Window:MakeTab({Name = "Aimbot", Icon = "rbxassetid://4483345998", PremiumOnly = false})
local tab2 = Window:MakeTab({Name = "Esp", Icon = "rbxassetid://4483345998", PremiumOnly = false})
local tab3 = Window:MakeTab({Name = "Others", Icon = "rbxassetid://4483345998", PremiumOnly = false})

-- Variáveis de configuração
local SilentAimEnabled = false
local FOV = 100
local FOVVisible = false
local FOVCircle = Drawing.new("Circle")
local targetPart = "HumanoidRootPart"

-- Configurar círculo de FOV
FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Visible = FOVVisible
FOVCircle.Filled = false

-- Função para atualizar a posição do círculo de FOV
local function updateFOVPosition()
    local camera = workspace.CurrentCamera
    FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
end

-- Função para verificar se o jogador está dentro do FOV
local function isPlayerInFOV(player)
    if not player or not player.Character or not player.Character:FindFirstChild(targetPart) then
        return false
    end

    local camera = workspace.CurrentCamera
    local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)

    if not onScreen then
        return false
    end

    local fovPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distance = (Vector2.new(screenPos.X, screenPos.Y) - fovPos).Magnitude

    return distance <= FOV
end

-- Função para verificar se há parede no caminho
local function isVisible(player)
    local rayOrigin = workspace.CurrentCamera.CFrame.Position
    local rayDirection = (player.Character[targetPart].Position - rayOrigin).Unit * (player.Character[targetPart].Position - rayOrigin).Magnitude

    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return result and result.Instance:IsDescendantOf(player.Character)
end

-- Função para pegar o jogador mais próximo dentro do FOV
local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local closestDistance = FOV

    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(targetPart) then
            local camera = workspace.CurrentCamera
            local screenPos, onScreen = camera:WorldToViewportPoint(player.Character[targetPart].Position)

            if onScreen and isPlayerInFOV(player) and isVisible(player) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - FOVCircle.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Função para mirar no jogador
local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[targetPart].Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

-- Atualizar círculo de FOV
game:GetService("RunService").RenderStepped:Connect(function()
    if FOVVisible then
        updateFOVPosition()
    end

    if SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target then
            aimAt(target)
        end
    end
end)



tab1:AddToggle({
    Name = "Ativar Aimbot",
    Default = false,
    Callback = function(value)
        SilentAimEnabled = value
    end
})b

tab1:AddTextbox({
    Name = "Tamanho do FOV",
    Default = "100",
    TextDisappear = false,
    Callback = function(value)
        local numericValue = tonumber(value)
        if numericValue and numericValue >= 0 and numericValue <= 300 then
            FOV = numericValue
            FOVCircle.Radius = numericValue
        else
            print("Por favor, insira um valor entre 0 e 300.")
        end
    end
})

tab1:AddToggle({
    Name = "Mostrar FOV",
    Default = false,
    Callback = function(value)
        FOVVisible = value
        FOVCircle.Visible = value
    end
})

tab1:AddDropdown({
    Name = "FOV Color",
    Options = {"White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Brown", "Black", "Gray", "Lime", "Magenta", "Rose", "Violet", "Navy", "Olive", "Gold", "Silver", "Maroon", "Mint", "Coral", "Turquoise", "Chocolate", "Cream", "Teal", "Crimson", "Ruby", "Amber", "Jade", "Lavender", "RGB"},
    Default = "White",
    Callback = function(option)
        local colors = {
            White = Color3.new(1, 1, 1),
            Red = Color3.new(1, 0, 0),
            Green = Color3.new(0, 1, 0),
            Blue = Color3.new(0, 0, 1),
            Yellow = Color3.new(1, 1, 0),
            Purple = Color3.new(0.5, 0, 0.5),
            Orange = Color3.new(1, 0.5, 0),
            Cyan = Color3.new(0, 1, 1),
            Pink = Color3.new(1, 0.75, 0.8),
            Brown = Color3.new(0.65, 0.16, 0.16),
            Black = Color3.new(0, 0, 0),
            Gray = Color3.new(0.5, 0.5, 0.5),
            Lime = Color3.new(0, 1, 0),
            Magenta = Color3.new(1, 0, 1),
            Rose = Color3.new(1, 0.5, 0.5),
            Violet = Color3.new(0.93, 0.51, 0.93),
            Navy = Color3.new(0, 0, 0.5),
            Olive = Color3.new(0.5, 0.5, 0),
            Gold = Color3.new(1, 0.84, 0),
            Silver = Color3.new(0.75, 0.75, 0.75),
            Maroon = Color3.new(0.5, 0, 0),
            Mint = Color3.new(0.6, 1, 0.6),
            Coral = Color3.new(1, 0.5, 0.31),
            Turquoise = Color3.new(0.25, 0.88, 0.82),
            Chocolate = Color3.new(0.82, 0.41, 0.12),
            Cream = Color3.new(1, 0.99, 0.82),
            Teal = Color3.new(0, 0.5, 0.5),
            Crimson = Color3.new(0.86, 0.08, 0.24),
            Ruby = Color3.new(0.88, 0.07, 0.37),
            Amber = Color3.new(1, 0.75, 0),
            Jade = Color3.new(0, 0.66, 0.42),
            Lavender = Color3.new(0.9, 0.9, 0.98)
        }

        if option == "RGB" then
            isRGB = true
        else
            isRGB = false
            FOVCircle.Color = colors[option]
        end
    end
})

tab1:AddDropdown({
    Name = "Parte do Corpo",
    Options = {"Cabeça", "Barriga"},
    Default = "Barriga",
    Callback = function(option)
        targetPart = option == "Cabeça" and "Head" or "HumanoidRootPart"
    end
})


tab2:AddParagraph("","")

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

local espEnabled = false
local espColor = Color3.fromRGB(255, 255, 255) -- Branco padrão
local isRGB = false

-- Função para animação RGB com velocidade reduzida
local function rgbAnimation()
    local hue = 0
    return function()
        hue = (hue + 0.002) % 1 -- Velocidade mais lenta (0.002 por frame)
        return Color3.fromHSV(hue, 1, 1)
    end
end

local getRGBColor = rgbAnimation()

local function drawESP(targetPlayer)
    local espBox = Drawing.new("Square")
    espBox.Thickness = 1
    espBox.Filled = false
    espBox.Transparency = 1
    espBox.Visible = false

    RunService.RenderStepped:Connect(function()
        if espEnabled and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = targetPlayer.Character.HumanoidRootPart
            local head = targetPlayer.Character:FindFirstChild("Head")

            if humanoidRootPart and head then
                local rootPos, onScreen = camera:WorldToViewportPoint(humanoidRootPart.Position)
                local headPos, _ = camera:WorldToViewportPoint(head.Position)
                local distance = (headPos - rootPos).magnitude

                if onScreen then
                    espBox.Size = Vector2.new(distance * 2, distance * 3)
                    espBox.Position = Vector2.new(rootPos.X - espBox.Size.X / 2, rootPos.Y - espBox.Size.Y / 2)
                    espBox.Color = isRGB and getRGBColor() or espColor
                    espBox.Visible = true
                else
                    espBox.Visible = false
                end
            else
                espBox.Visible = false
            end
        else
            espBox.Visible = false
        end
    end)
end

local function addESPToPlayer(player)
    if player.Character then
        drawESP(player)
    end
    player.CharacterAdded:Connect(function()
        drawESP(player)
    end)
end

for _, targetPlayer in pairs(Players:GetPlayers()) do
    if targetPlayer ~= LocalPlayer then
        addESPToPlayer(targetPlayer)
    end
end

Players.PlayerAdded:Connect(addESPToPlayer)


tab2:AddToggle({
    Name = "Ativar ESP Box",
    Default = espEnabled,
    Callback = function(state)
        espEnabled = state
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                addESPToPlayer(player)
            end
        end
    end
})

tab2:AddDropdown({
    Name = "ESP Box Color",
    Default = "White",
    Options = {
        "White", "Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Cyan", "Pink", "Brown", "Black", 
        "Gray", "Lime", "Magenta", "Rose", "Violet", "Navy", "Olive", "Gold", "Silver", "Maroon", 
        "Mint", "Coral", "Turquoise", "Chocolate", "Cream", "Teal", "Crimson", "Ruby", "Amber", 
        "Jade", "Lavender", "RGB"
    },
    Callback = function(option)
        local colors = {
            White = Color3.fromRGB(255, 255, 255),
            Red = Color3.fromRGB(255, 0, 0),
            Green = Color3.fromRGB(0, 255, 0),
            Blue = Color3.fromRGB(0, 0, 255),
            Yellow = Color3.fromRGB(255, 255, 0),
            Purple = Color3.fromRGB(128, 0, 128),
            Orange = Color3.fromRGB(255, 165, 0),
            Cyan = Color3.fromRGB(0, 255, 255),
            Pink = Color3.fromRGB(255, 192, 203),
            Brown = Color3.fromRGB(165, 42, 42),
            Black = Color3.fromRGB(0, 0, 0),
            Gray = Color3.fromRGB(128, 128, 128),
            Lime = Color3.fromRGB(0, 255, 0),
            Magenta = Color3.fromRGB(255, 0, 255),
            Rose = Color3.fromRGB(255, 102, 204),
            Violet = Color3.fromRGB(238, 130, 238),
            Navy = Color3.fromRGB(0, 0, 128),
            Olive = Color3.fromRGB(128, 128, 0),
            Gold = Color3.fromRGB(255, 215, 0),
            Silver = Color3.fromRGB(192, 192, 192),
            Maroon = Color3.fromRGB(128, 0, 0),
            Mint = Color3.fromRGB(189, 252, 201),
            Coral = Color3.fromRGB(255, 127, 80),
            Turquoise = Color3.fromRGB(64, 224, 208),
            Chocolate = Color3.fromRGB(210, 105, 30),
            Cream = Color3.fromRGB(255, 253, 208),
            Teal = Color3.fromRGB(0, 128, 128),
            Crimson = Color3.fromRGB(220, 20, 60),
            Ruby = Color3.fromRGB(224, 17, 95),
            Amber = Color3.fromRGB(255, 191, 0),
            Jade = Color3.fromRGB(0, 168, 107),
            Lavender = Color3.fromRGB(230, 230, 250)
        }

        if option == "RGB" then
            isRGB = true
        else
            isRGB = false
            espColor = colors[option]
        end
    end
})




tab2:AddParagraph("","")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = game.Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local espLineEnabled = false
local espLineDirection = "Top" -- "Top" ou "Bottom"
local lineColor = Color3.new(1, 0, 0) -- Cor inicial da linha (vermelho)
local lines = {}

local colors = {
    Color3.new(1, 0, 0),   -- Vermelho
    Color3.new(0, 1, 0),   -- Verde
    Color3.new(0, 0, 1),   -- Azul
    Color3.new(1, 1, 0),   -- Amarelo
    Color3.new(1, 0.5, 0), -- Laranja
    Color3.new(0.5, 0, 0.5), -- Roxo
    Color3.new(0, 1, 1),   -- Ciano
    Color3.new(1, 0, 1),   -- Magenta
    Color3.new(0.5, 0.5, 0.5), -- Cinza
    Color3.new(0, 0, 0),    -- Preto
    Color3.new(1, 1, 1),    -- Branco
    Color3.new(0.75, 0.75, 0.75), -- Prata
    Color3.new(0.5, 0.4, 0.3), -- Marrom
    Color3.new(0.3, 0.3, 0.6), -- Azul Escuro
    Color3.new(0.6, 0.2, 0.2), -- Vermelho Escuro
    Color3.new(0.4, 0.4, 0.2), -- Verde Oliva
    Color3.new(0.8, 0.8, 0.2), -- Amarelo Claro
    Color3.new(0.7, 0.2, 0.5), -- Rosa
    Color3.new(0.2, 0.7, 0.8), -- Turquesa
    Color3.new(0.8, 0.5, 0.2), -- Laranja Queimada
    Color3.new(0.2, 0.8, 0.3), -- Verde Limão
    Color3.new(0.6, 0.4, 0.6), -- Lavanda
    Color3.new(0.8, 0.8, 0.8)  -- Cinza Claro
}

local function createESPLine(player)
    local Line = Drawing.new("Line")
    Line.Color = lineColor
    Line.Thickness = 1
    Line.Transparency = 1
    Line.Visible = false

    lines[player] = Line

    RunService.RenderStepped:Connect(function()
        if espLineEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

            if onScreen then
                if espLineDirection == "Top" then
                    Line.From = Vector2.new(Camera.ViewportSize.X / 2, 0)  -- Linha vindo de cima
                elseif espLineDirection == "Bottom" then
                    Line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)  -- Linha vindo de baixo
                end
                Line.To = Vector2.new(screenPos.X, screenPos.Y)
                Line.Visible = true
            else
                Line.Visible = false
            end
        else
            Line.Visible = false
        end
    end)
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end)

for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
        createESPLine(player)
        player.CharacterAdded:Connect(function()
            wait(0)
            createESPLine(player)
        end)
    end
end

-- GUI controls
tab2:AddToggle({
    Name = "Esp Line",
    Default = espLineEnabled,
    Callback = function(state)
        espLineEnabled = state
        for _, line in pairs(lines) do
            line.Visible = state
        end
    end,
})

tab2:AddDropdown({
    Name = "Line Color",
    Default = "Red",  -- Initial color
    Options = {"Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Cyan", "Magenta", "Gray", "Black", "White", "Silver", "Brown", "Dark Blue", "Dark Red", "Olive", "Light Yellow", "Pink", "Turquoise", "Burnt Orange", "Lime Green", "Lavender", "Light Gray", "RGB"},
    Callback = function(selected)
        isRGB = (selected == "RGB")
        local colorsMap = {
            ["Red"] = colors[1],
            ["Green"] = colors[2],
            ["Blue"] = colors[3],
            ["Yellow"] = colors[4],
            ["Orange"] = colors[5],
            ["Purple"] = colors[6],
            ["Cyan"] = colors[7],
            ["Magenta"] = colors[8],
            ["Gray"] = colors[9],
            ["Black"] = colors[10],
            ["White"] = colors[11],
            ["Silver"] = colors[12],
            ["Brown"] = colors[13],
            ["Dark Blue"] = colors[14],
            ["Dark Red"] = colors[15],
            ["Olive"] = colors[16],
            ["Light Yellow"] = colors[17],
            ["Pink"] = colors[18],
            ["Turquoise"] = colors[19],
            ["Burnt Orange"] = colors[20],
            ["Lime Green"] = colors[21],
            ["Lavender"] = colors[22],
            ["Light Gray"] = colors[23]
        }
        if not isRGB then
            lineColor = colorsMap[selected]
        end
        for _, line in pairs(lines) do
            line.Color = lineColor
        end
    end
})

tab2:AddParagraph("","")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local chamsEnabled = false
local chamsLoop
local selectedColor = Color3.new(1, 0, 0) -- Cor inicial (vermelho)

-- Lista de cores disponíveis para o Chams
local chamsColors = {
    {Name = "Red", Color = Color3.new(1, 0, 0)},
    {Name = "Green", Color = Color3.new(0, 1, 0)},
    {Name = "Blue", Color = Color3.new(0, 0, 1)},
    {Name = "Yellow", Color = Color3.new(1, 1, 0)},
    {Name = "Purple", Color = Color3.new(0.5, 0, 0.5)},
    {Name = "Orange", Color = Color3.new(1, 0.5, 0)},
    {Name = "Cyan", Color = Color3.new(0, 1, 1)},
    {Name = "Magenta", Color = Color3.new(1, 0, 1)},
    {Name = "White", Color = Color3.new(1, 1, 1)},
    {Name = "Gray", Color = Color3.new(0.5, 0.5, 0.5)},
    {Name = "Black", Color = Color3.new(0, 0, 0)},
    {Name = "Brown", Color = Color3.new(0.65, 0.16, 0.16)},
    {Name = "Silver", Color = Color3.new(0.75, 0.75, 0.75)},
    {Name = "Pink", Color = Color3.new(1, 0.75, 0.8)},
    {Name = "Lime", Color = Color3.new(0, 1, 0)},
    {Name = "Violet", Color = Color3.new(0.93, 0.51, 0.93)},
    {Name = "Navy", Color = Color3.new(0, 0, 0.5)},
    {Name = "Olive", Color = Color3.new(0.5, 0.5, 0)},
    {Name = "Gold", Color = Color3.new(1, 0.84, 0)},
    {Name = "Mint", Color = Color3.new(0.6, 1, 0.6)},
    {Name = "Coral", Color = Color3.new(1, 0.5, 0.31)},
    {Name = "Turquoise", Color = Color3.new(0.25, 0.88, 0.82)},
    {Name = "Chocolate", Color = Color3.new(0.82, 0.41, 0.12)},
    {Name = "Cream", Color = Color3.new(1, 0.99, 0.82)},
    {Name = "Teal", Color = Color3.new(0, 0.5, 0.5)},
    {Name = "Crimson", Color = Color3.new(0.86, 0.08, 0.24)},
    {Name = "Ruby", Color = Color3.new(0.88, 0.07, 0.37)},
    {Name = "Amber", Color = Color3.new(1, 0.75, 0)},
    {Name = "Jade", Color = Color3.new(0, 0.66, 0.42)},
    {Name = "Lavender", Color = Color3.new(0.9, 0.9, 0.98)}
}

local function applyChams(player)
    if player ~= LocalPlayer and player.Character and not player.Character:FindFirstChild("Chams") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Chams"
        highlight.FillColor = selectedColor -- Usar a cor selecionada
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 1
        highlight.Parent = player.Character
    end
end

local function toggleChams(state)
    if state then
        chamsLoop = coroutine.wrap(function()
            while chamsEnabled do
                for _, player in pairs(Players:GetPlayers()) do
                    applyChams(player)
                end
                wait(0.25)
            end
        end)
        chamsLoop()
    else
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Chams") then
                player.Character.Chams:Destroy()
            end
        end
    end
end

tab2:AddToggle({
    Name = "Chams",
    Default = chamsEnabled,
    Callback = function(state)
        chamsEnabled = state
        toggleChams(state)
    end
})

-- Adicionar o Dropdown para escolher a cor
tab2:AddDropdown({
    Name = "Choose Chams Color",
    Default = chamsColors[1].Name,
    Options = {
        chamsColors[1].Name, chamsColors[2].Name, chamsColors[3].Name, chamsColors[4].Name, chamsColors[5].Name, 
        chamsColors[6].Nap
