local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local ESP_SETTINGS = {
    NameColor = Color3.new(1, 1, 1),
    HealthOutlineColor = Color3.new(0, 0, 0, 0),  -- Invisível
    HealthHighColor = Color3.new(0, 1, 0),
    HealthLowColor = Color3.new(1, 0, 0),
    Teamcheck = false,
    Enabled = false,
    ShowName = false,
    ShowHealth = false,
    ShowDistance = false,
    BoxColor = Color3.new(1, 1, 1), -- Cor da caixa
    BoxOutlineColor = Color3.new(0, 0, 0), -- Cor do contorno da caixa
    DistanceColor = Color3.new(1, 1, 1), -- Cor da distância
    HealthThickness = 2,  -- Espessura inicial da barra de saúde
}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function createEsp(player)
    local esp = {
        name = create("Text", {
            Color = ESP_SETTINGS.NameColor,
            Outline = true,
            Center = true,
            Size = 13
        }),
        healthOutline = create("Line", {
            Thickness = ESP_SETTINGS.HealthThickness,
            Color = ESP_SETTINGS.HealthOutlineColor,
            Transparency = 1,  -- Invisível
            Visible = false   -- Invisível
        }),
        health = create("Line", {
            Thickness = ESP_SETTINGS.HealthThickness
        }),
        distance = create("Text", {
            Color = ESP_SETTINGS.DistanceColor,
            Size = 12,
            Outline = true,
            Center = true
        }),
        boxOutline = create("Square", {
            Color = ESP_SETTINGS.BoxOutlineColor,
            Thickness = 3,
            Filled = false,
            Visible = false
        }),
        box = create("Square", {
            Color = ESP_SETTINGS.BoxColor,
            Thickness = 1,
            Filled = false,
            Visible = false
        }),
    }

    cache[player] = esp
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end

    for _, drawing in pairs(esp) do
        drawing:Remove()
    end

    cache[player] = nil
end

local function updateEsp()
    for player, esp in pairs(cache) do
        local character, team = player.Character, player.Team
        if character and (not ESP_SETTINGS.Teamcheck or (team and team ~= localPlayer.Team)) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChild("Humanoid")
            local shouldShow = ESP_SETTINGS.Enabled
            if rootPart and head and humanoid and shouldShow then
                local position, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local hrp2D = camera:WorldToViewportPoint(rootPart.Position)
                    local charSize = (camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
                    local boxSize = Vector2.new(math.floor(charSize * 1.8), math.floor(charSize * 1.9))
                    local boxPosition = Vector2.new(math.floor(hrp2D.X - charSize * 1.8 / 2), math.floor(hrp2D.Y - charSize * 1.6 / 2))

                    esp.boxOutline.Size = boxSize
                    esp.boxOutline.Position = boxPosition
                    esp.box.Size = boxSize
                    esp.box.Position = boxPosition

                    if ESP_SETTINGS.ShowName and ESP_SETTINGS.Enabled then
                        esp.name.Visible = true
                        esp.name.Text = string.lower(player.Name)
                        esp.name.Position = Vector2.new(boxPosition.X + charSize * 1.8 / 2, boxPosition.Y - 16)
                        esp.name.Color = ESP_SETTINGS.NameColor
                    else
                        esp.name.Visible = false
                    end

                    if ESP_SETTINGS.ShowHealth and ESP_SETTINGS.Enabled then
                        esp.healthOutline.Visible = false  -- Invisível
                        esp.health.Visible = true
                        local healthPercentage = player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth
                        esp.healthOutline.From = Vector2.new(boxPosition.X - 6, boxPosition.Y + boxSize.Y)
                        esp.healthOutline.To = Vector2.new(esp.healthOutline.From.X, esp.healthOutline.From.Y - boxSize.Y)
                        esp.health.From = Vector2.new((boxPosition.X - 5), boxPosition.Y + boxSize.Y)
                        esp.health.To = Vector2.new(esp.health.From.X, esp.health.From.Y - (player.Character.Humanoid.Health / player.Character.Humanoid.MaxHealth) * boxSize.Y)
                        esp.health.Color = ESP_SETTINGS.HealthLowColor:Lerp(ESP_SETTINGS.HealthHighColor, healthPercentage)
                        esp.health.Thickness = ESP_SETTINGS.HealthThickness  -- Atualizando espessura
                    else
                        esp.healthOutline.Visible = false
                        esp.health.Visible = false
                    end

                    if ESP_SETTINGS.ShowDistance and ESP_SETTINGS.Enabled then
                        local distance = (camera.CFrame.p - rootPart.Position).Magnitude
                        esp.distance.Text = string.format("%.1f studs", distance)
                        esp.distance.Position = Vector2.new(boxPosition.X + charSize * 1.8 / 2, boxPosition.Y + boxSize.Y + 5)
                        esp.distance.Visible = true
                        esp.distance.Color = ESP_SETTINGS.DistanceColor  -- Atualizando cor
                    else
                        esp.distance.Visible = false
                    end
                else
                    for _, drawing in pairs(esp) do
                        drawing.Visible = false
                    end
                end
            else
                for _, drawing in pairs(esp) do
                    drawing.Visible = false
                end
            end
        else
            for _, drawing in pairs(esp) do
                drawing.Visible = false
            end
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        createEsp(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
end)

RunService.RenderStepped:Connect(updateEsp)

-- Configurando a Rayfield UI com Key System
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "ESP Settings",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "By: Bomzinho/Sx_Mods",
    Theme = "Default",

    KeySystem = true, -- Habilita o sistema de chaves
    KeySettings = {
        Title = "ESP Settings",
        Subtitle = "Key System",
        Note = "Use the key 'BomTrial'",
        FileName = "Key",
        SaveKey = false, -- Não salvar a chave
        GrabKeyFromSite = false,
        Key = {"BomTrial"}
    }
})

-- Criando a aba "ESP" com uma imagem
local Tab = Window:CreateTab("ESP", 4483362458)

-- Adicionando o toggle para ativar/desativar o ESP
Tab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = ESP_SETTINGS.Enabled,
    Flag = "EnableESP", 
    Callback = function(value)
        ESP_SETTINGS.Enabled = value
        updateEsp()
    end,
})

-- Adicionando toggle para mostrar nomes
Tab:CreateToggle({
    Name = "Show Names",
    CurrentValue = ESP_SETTINGS.ShowName,
    Flag = "ShowNames",
    Callback = function(value)
        ESP_SETTINGS.ShowName = value
        updateEsp()
    end,
})

-- Adicionando toggle para mostrar barra de saúde
Tab:CreateToggle({
    Name = "Show Health",
    CurrentValue = ESP_SETTINGS.ShowHealth,
    Flag = "ShowHealth",
    Callback = function(value)
        ESP_SETTINGS.ShowHealth = value
        updateEsp()
    end,
})

-- Adicionando toggle para mostrar distância
Tab:CreateToggle({
    Name = "Show Distance",
    CurrentValue = ESP_SETTINGS.ShowDistance,
    Flag = "ShowDistance",
    Callback = function(value)
        ESP_SETTINGS.ShowDistance = value
        updateEsp()
    end,
})

-- Adicionando toggle para Teamcheck
Tab:CreateToggle({
    Name = "Teamcheck",
    CurrentValue = ESP_SETTINGS.Teamcheck,
    Flag = "Teamcheck",
    Callback = function(value)
        ESP_SETTINGS.Teamcheck = value
        updateEsp()
    end,
})

-- Adicionando slider para espessura do health
Tab:CreateSlider({
    Name = "Health Thickness",
    Range = {1, 10},
    Increment = 0.1,
    Suffix = "Thickness",
    CurrentValue = ESP_SETTINGS.HealthThickness,
    Flag = "HealthThickness",
    Callback = function(value)
        ESP_SETTINGS.HealthThickness = value
        updateEsp()
    end
})

-- Adicionando color picker para a cor do distance
Tab:CreateColorPicker({
    Name = "Distance Color",
    Color = ESP_SETTINGS.DistanceColor,
    Flag = "DistanceColor",
    Callback = function(value)
        ESP_SETTINGS.DistanceColor = value
        updateEsp()
    end
})

-- Adicionando color picker para a cor do name
Tab:CreateColorPicker({
    Name = "Name Color",
    Color = ESP_SETTINGS.NameColor,
    Flag = "NameColor",
    Callback = function(value)
        ESP_SETTINGS.NameColor = value
        updateEsp()
    end
})

Rayfield:LoadConfiguration()

updateEsp()
