local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local dwRunService = game:GetService("RunService")
local dwEntities = game:GetService("Players")
local dwCamera = workspace.CurrentCamera
local dwLocalPlayer = dwEntities.LocalPlayer
local dwMouse = dwLocalPlayer:GetMouse()

local settings = {
    Aimbot = false,
    Aimbot_AimPart = "Head",
    Aimbot_TeamCheck = false,
    Aimbot_Draw_Fov = false,
    Aimbot_Fov_Size = 75,
    Aimbot_Fov_Color = Color3.fromRGB(255, 255, 255),
    Aimbot_Fov_Transparency = 1,
    Aimbot_Fov_Thickness = 1,
    Aimbot_Fov_Filled = false
}

local Window = OrionLib:MakeWindow({Name = "Aimbot Script", HidePremium = true, SaveConfig = true, ConfigFolder = "AimbotConfig"})

local AimbotTab = Window:MakeTab({
    Name = "Aimbot Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

AimbotTab:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(value)
        settings.Aimbot = value
    end
})

AimbotTab:AddToggle({
    Name = "Team Check",
    Default = false,
    Callback = function(value)
        settings.Aimbot_TeamCheck = value
    end
})

AimbotTab:AddDropdown({
    Name = "Aim Part",
    Default = "Head",
    Options = {"Head", "Humanoid"},
    Callback = function(value)
        settings.Aimbot_AimPart = value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Size",
    Min = 25,
    Max = 200,
    Default = 75,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 1,
    Callback = function(value)
        settings.Aimbot_Fov_Size = value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Thickness",
    Min = 1,
    Max = 10,
    Default = 1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.1,
    Callback = function(value)
        settings.Aimbot_Fov_Thickness = value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Transparency",
    Min = 0,
    Max = 1,
    Default = 1,
    Color = Color3.fromRGB(255, 255, 255),
    Increment = 0.1,
    Callback = function(value)
        settings.Aimbot_Fov_Transparency = value
    end
})

AimbotTab:AddColorPicker({
    Name = "FOV Color",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(value)
        settings.Aimbot_Fov_Color = value
    end
})

AimbotTab:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(value)
        settings.Aimbot_Draw_Fov = value
    end
})

local fovcircle = Drawing.new("Circle")
fovcircle.Visible = settings.Aimbot_Draw_Fov
fovcircle.Radius = settings.Aimbot_Fov_Size
fovcircle.Color = settings.Aimbot_Fov_Color
fovcircle.Filled = settings.Aimbot_Fov_Filled
fovcircle.Thickness = settings.Aimbot_Fov_Thickness
fovcircle.Transparency = settings.Aimbot_Fov_Transparency
fovcircle.Position = Vector2.new(dwCamera.ViewportSize.X / 2, dwCamera.ViewportSize.Y / 2)

dwRunService.RenderStepped:Connect(function()
    fovcircle.Position = Vector2.new(dwCamera.ViewportSize.X / 2, dwCamera.ViewportSize.Y / 2)
    fovcircle.Radius = settings.Aimbot_Fov_Size
    fovcircle.Color = settings.Aimbot_Fov_Color
    fovcircle.Thickness = settings.Aimbot_Fov_Thickness
    fovcircle.Transparency = settings.Aimbot_Fov_Transparency
    fovcircle.Filled = settings.Aimbot_Fov_Filled

    if settings.Aimbot then
        local closest_distance = math.huge
        local closest_character = nil

        for _, player in pairs(dwEntities:GetPlayers()) do
            if player ~= dwLocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                local teamCheckPassed = settings.Aimbot_TeamCheck == false or player.Team ~= dwLocalPlayer.Team

                if humanoid.Health > 0 and teamCheckPassed then
                    local aim_part = player.Character:FindFirstChild(settings.Aimbot_AimPart)
                    if aim_part then
                        local part_position, is_on_screen = dwCamera:WorldToViewportPoint(aim_part.Position)
                        
                        if is_on_screen then
                            local distance = (Vector2.new(dwMouse.X, dwMouse.Y) - Vector2.new(part_position.X, part_position.Y)).Magnitude
                            if distance < closest_distance and distance < settings.Aimbot_Fov_Size then
                                closest_distance = distance
                                closest_character = player
                            end
                        end
                    end
                end
            end
        end

        if closest_character then
            local aim_part = closest_character.Character:FindFirstChild(settings.Aimbot_AimPart)
            if aim_part then
                dwCamera.CFrame = CFrame.new(dwCamera.CFrame.Position, aim_part.Position)
            end
        end
    end
end)

OrionLib:Init()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local currentCamera = workspace.CurrentCamera
local worldToViewportPoint = currentCamera.worldToViewportPoint

local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0, 3, 0)

getgenv().EspSettings = {
	TeamCheck = false,
	ToggleKey = "RightAlt",
	RefreshRate = 25,
	MaximumDistance = 9999999999999999999999,
	FaceCamera = true,
	AlignPoints = false,
    
	MouseVisibility = {
		Enabled = false,
		Radius = 60,
		Transparency = 0.3,
		Method = "Hover",
		HoverRadius = 50,
		Selected = {
			Boxes = true,
			Tracers = true,
			Names = true,
			Skeletons = true,
			HealthBars = true,
			HeadDots = true,
			LookTracers = true
		}
	},
	Highlights = {
		Enabled = false,
		Players = {},
		Transparency = 1,
		Color = Color3.fromRGB(255, 150, 0),
		AlwaysOnTop = true
	},
	NPC = {
		Color = Color3.fromRGB(150,150,150),
		Transparency = 1,
		RainbowColor = false,
		Overrides = {
			Boxes = true,
			Tracers = true,
			Names = true,
			Skeletons = true,
			HealthBars = true,
			HeadDots = true,
			LookTracers = true
		}
	},
	Boxes = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = 1
	},
	Tracers = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Origin = "Top",
		Thickness = 1
	},
	Names = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		Font = Drawing.Fonts.UI,
		Size = 18,
		ShowDistance = false,
		ShowHealth = false,
		UseDisplayName = false,
		DistanceDataType = "m",
		HealthDataType = "Percentage"
	},
	Skeletons = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = 1
	},
	HealthBars = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(0,255,0),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Origin = "None",
		OutlineBarOnly = true
	},
	HeadDots = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = 1,
		Filled = false,
		Scale = 1
	},
	LookTracers = {
		Enabled = false,
		Transparency = 1,
		Color = Color3.fromRGB(255,255,255),
		UseTeamColor = false,
		RainbowColor = false,
		outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = 1,
		Length = 5
	}
}
loadstring(game:HttpGet("https://raw.githubusercontent.com/zzerexx/scripts/main/UniversalEsp.lua", "UniversalEsp"))()

if _G.teamcheck and _G.teamcheckmode == "colors" and getfenv().EspSettings.TeamCheck then
    getfenv().EspSettings.Skeletons.UseTeamColor = true
    getfenv().EspSettings.LookTracersg.UseTeamColor = true
    getfenv().EspSettings.HeadDots.UseTeamColor = true
elseif _G.teamcheck and _G.teamcheckmode == "invisible" and getfenv().EspSettings.TeamCheck then
    getfenv().EspSettings.Skeletons.UseTeamColor = false
    getfenv().EspSettings.LookTracers.UseTeamColor = false
    getfenv().EspSettings.HeadDots.UseTeamColor = false
end

if _G.teamcheck == false and _G.teamcheckmode == "colors" and getfenv().EspSettings.TeamCheck == false and getfenv().EspSettings.Skeletons.UseTeamColor == true and getfenv().EspSettings.LookTracersg.UseTeamColor == true and getfenv().EspSettings.HeadDots.UseTeamColor == true then
    getfenv().EspSettings.Skeletons.UseTeamColor = false
    getfenv().EspSettings.LookTracers.UseTeamColor = false
    getfenv().EspSettings.HeadDots.UseTeamColor = false
end

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/linemaster2/esp-library/main/library.lua"))();

ESP.Enabled = true;
ESP.Teamcheck = false;
ESP.ShowName = false;
ESP.ShowDistance = false;

_G.teamcheck = false
_G.teamcheckmode = "colors"
_G.teamcolor = Color3.new(0, 1, 0)
_G.enemycolor = Color3.new(1, 0, 0)

_G.boxColor = Color3.new(0, 0, 0)
_G.boxThickness = 1
_G.boxTransparency = 1
_G.boxVisible = false

_G.ShowBox = false

_G.boxFilledColor = Color3.new(0, 0, 0)
_G.boxFilledTransparency = 0.5
_G.boxFilledVisible = false

_G.HealthBarThickness = 1
_G.HealthBarVisible = false
_G.HealthBarTransparency = 1
_G.HealthBarColor = Color3.new(0, 1, 0)
_G.HealthBarFilled = true

_G.HealthBarPosition = "Left"

_G.TracerVisible = false
_G.TracerThickness = 1.5
_G.TracerTransparency = 1
_G.TracerColor = Color3.new(0, 0, 0)

_G.TracerFrom = "Bottom"

local function getTracerFromPosition()
    if _G.TracerFrom == "Bottom" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
    elseif _G.TracerFrom == "Middle" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    elseif _G.TracerFrom == "Top" then
        return Vector2.new(camera.ViewportSize.X / 2, 0)
    end
end

local function createDrawingObjects()
    local Box = Drawing.new("Square")
    Box.Color = _G.boxColor
    Box.Thickness = _G.boxThickness
    Box.Transparency = _G.boxTransparency
    Box.Filled = false
    Box.Visible = _G.boxVisible

    local BoxFilled = Drawing.new("Square")
    BoxFilled.Visible = _G.boxFilledVisible
    BoxFilled.Color = _G.boxFilledColor
    BoxFilled.Transparency = _G.boxFilledTransparency
    BoxFilled.Filled = true

    local HealthBar = Drawing.new("Square")
    HealthBar.Thickness = _G.HealthBarThickness
    HealthBar.Visible = _G.HealthBarVisible
    HealthBar.Transparency = _G.HealthBarTransparency
    HealthBar.Color = _G.HealthBarColor
    HealthBar.Filled = _G.HealthBarFilled

    local Tracer = Drawing.new("Line")
    Tracer.Visible = _G.TracerVisible
    Tracer.Thickness = _G.TracerThickness
    Tracer.Transparency = _G.TracerTransparency
    Tracer.Color = _G.TracerColor

    return Box, BoxFilled, HealthBar, Tracer
end

local function updateDrawingObjects(Box, BoxFilled, HealthBar, Tracer)
    Box.Color = _G.boxColor
    Box.Thickness = _G.boxThickness
    Box.Transparency = _G.boxTransparency
    Box.Visible = _G.boxVisible

    BoxFilled.Color = _G.boxFilledColor
    BoxFilled.Transparency = _G.boxFilledTransparency
    BoxFilled.Visible = _G.boxFilledVisible

    HealthBar.Thickness = _G.HealthBarThickness
    HealthBar.Visible = _G.HealthBarVisible
    HealthBar.Transparency = _G.HealthBarTransparency
    HealthBar.Color = _G.HealthBarColor
    HealthBar.Filled = _G.HealthBarFilled

    Tracer.Visible = _G.TracerVisible
    Tracer.Thickness = _G.TracerThickness
    Tracer.Transparency = _G.TracerTransparency
    Tracer.Color = _G.TracerColor

end

local function getHealthValues(player)
    local maxHealth, health
    if player:FindFirstChild("NRPBS") then
        maxHealth = player.NRPBS["MaxHealth"].Value
        health = player.NRPBS["Health"].Value
    else
        maxHealth = player.Character.Humanoid.MaxHealth
        health = player.Character.Humanoid.Health
    end
    return maxHealth, health
end

local function updateHealthBarPosition(HealthBar, Box, HeadPosition, LegPosition, RootPosition, isOutline, maxHealth, health)
    local offset = isOutline and 6 or 4
    local healthBarSize = (HeadPosition.Y - LegPosition.Y) / (maxHealth / math.clamp(health, 0, maxHealth))

    if _G.HealthBarPosition == "Left" then
        HealthBar.Position = Vector2.new(Box.Position.X - offset, Box.Position.Y + (1 / healthBarSize))
    elseif _G.HealthBarPosition == "Right" then
        HealthBar.Position = Vector2.new(Box.Position.X + Box.Size.X + offset - 2, Box.Position.Y + (1 / healthBarSize))
    end

    HealthBar.Size = Vector2.new(2, healthBarSize)
end

local function setupPlayerBox(v)
    local Box, BoxFilled, HealthBar, Tracer = createDrawingObjects()

    game:GetService("RunService").RenderStepped:Connect(function()
        updateDrawingObjects(Box, BoxFilled, HealthBar, Tracer)

        if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v ~= lplr and v.Character.Humanoid.Health > 0 then
            local Vector, onScreen = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)

            local RootPart = v.Character.HumanoidRootPart
            local Head = v.Character.Head
            local RootPosition, RootVis = worldToViewportPoint(currentCamera, RootPart.Position)
            local HeadPosition = worldToViewportPoint(currentCamera, Head.Position + HeadOff)
            local LegPosition = worldToViewportPoint(currentCamera, RootPart.Position - LegOff)

            if onScreen then
                local maxHealth, health = getHealthValues(v)

                Box.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                Box.Position = Vector2.new(RootPosition.X - Box.Size.X / 2, RootPosition.Y - Box.Size.Y / 2)
                Box.Visible = _G.boxVisible

                BoxFilled.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                BoxFilled.Position = Vector2.new(RootPosition.X - Box.Size.X / 2, RootPosition.Y - Box.Size.Y / 2)
                BoxFilled.Visible = _G.boxFilledVisible

                HealthBar.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y) / (maxHealth / math.clamp(health, 0, maxHealth)))
                updateHealthBarPosition(HealthBar, Box, HeadPosition, LegPosition, RootPosition, false, maxHealth, health)
                HealthBar.Color = Color3.fromRGB(255 - 255 / (maxHealth / health), 255 / (maxHealth / health), 0)
                HealthBar.Visible = _G.HealthBarVisible

                -- Atualizando a posição do Tracer
                Tracer.From = getTracerFromPosition()
                Tracer.To = Vector2.new(Vector.X, Vector.Y)

                if _G.teamcheck == true then
                    if _G.teamcheckmode == "colors" then
                        if v.TeamColor == lplr.TeamColor then
                            Box.Color = _G.teamcolor
                            BoxFilled.Color = _G.teamcolor
                            Tracer.Color = _G.teamcolor
                        else
                            Box.Color = _G.enemycolor
                            BoxFilled.Color = _G.enemycolor
                            Tracer.Color = _G.enemycolor
                        end
                    elseif _G.teamcheckmode == "invisible" then
                        if v.TeamColor == lplr.TeamColor then
                            Box.Visible = false
                            BoxFilled.Visible = false
                            HealthBar.Visible = false
                            Tracer.Visible = false
                            Box.Color = _G.boxColor
                            BoxFilled.Color = _G.boxFilledColor
                            Tracer.Color = _G.TracerColor
                        else
                            Box.Color = _G.enemycolor
                            BoxFilled.Color = _G.enemycolor
                            Tracer.Color = _G.enemycolor
                        end
                    end
                end
            else
                Box.Visible = false
                BoxFilled.Visible = false
                HealthBar.Visible = false
                Tracer.Visible = false
                Box.Color = _G.boxColor
                BoxFilled.Color = _G.boxFilledColor
                Tracer.Color = _G.TracerColor
            end
        else
            Box.Visible = false
            BoxFilled.Visible = false
            HealthBar.Visible = false
            Tracer.Visible = false
        end
    end)
end

for _, player in pairs(game.Players:GetChildren()) do
    setupPlayerBox(player)
end

game.Players.PlayerAdded:Connect(function(player)
    setupPlayerBox(player)
end)

local Window = Rayfield:CreateWindow({
    Name = "BNT ESP",
    Icon = 0,
    LoadingTitle = "By Bomzinho",
    LoadingSubtitle = "Loading....",
    Theme = "Amethyst",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ESPP"
    },

    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },

    KeySystem = true,
    KeySettings = {
        Title = "BNT ESP",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"4321", "1234"}
    }
})

local Tab1 = Window:CreateTab("ESP")

Tab1:CreateLabel("Geral Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

Tab1:CreateToggle({
    Name = "Show Box",
    CurrentValue = false,
    Flag = "Show Box",
    Callback = function(Value)
        _G.boxVisible = Value
    end,
})

Tab1:CreateToggle({
    Name = "Box Filled",
    CurrentValue = false,
    Flag = "BoxFilled",
    Callback = function(Value)
        _G.boxFilledVisible = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Health Bar",
    CurrentValue = false,
    Flag = "healthbarouf",
    Callback = function(Value)
        _G.HealthBarVisible = Value
    end,
})

Tab1:CreateToggle({
    Name = "Health Bar Filled",
    CurrentValue = false,
    Flag = "healthbarouff",
    Callback = function(Value)
        _G.HealthBarFilled = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Tracer",
    CurrentValue = false,
    Flag = "Name",
    Callback = function(Value)
        _G.TracerVisible = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Name",
    CurrentValue = false,
    Flag = "Name",
    Callback = function(Value)
        ESP.ShowName = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Distance",
    CurrentValue = false,
    Flag = "Distance",
    Callback = function(Value)
        ESP.ShowDistance = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Skeleton",
    CurrentValue = false,
    Flag = "Disthhance",
    Callback = function(Value)
        getfenv().EspSettings.Skeletons.Enabled = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show Look Tracer",
    CurrentValue = false,
    Flag = "Disthhhance",
    Callback = function(Value)
        getfenv().EspSettings.LookTracers.Enabled = Value
    end,
})

Tab1:CreateToggle({
    Name = "Show HeadDots",
    CurrentValue = false,
    Flag = "Disthhhhance",
    Callback = function(Value)
        getfenv().EspSettings.HeadDots.Enabled = Value
    end,
})

Tab1:CreateToggle({
    Name = "Teamcheck",
    CurrentValue = false,
    Flag = "teamcheck",
    Callback = function(Value)
        _G.teamcheck = Value
        ESP.Teamcheck = Value
        getfenv().EspSettings.TeamCheck = Value
    end,
})

Tab1:CreateLabel("Color Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

Tab1:CreateColorPicker({
    Name = "Team Color",
    Color = Color3.fromRGB(0, 255, 0),
    Flag = "teamcolor",
    Callback = function(Value)
        _G.teamcolor = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Enemy Color",
    Color = Color3.fromRGB(255, 0, 0),
    Flag = "enemycolor",
    Callback = function(Value)
        _G.enemycolor = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Box Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "boxColor",
    Callback = function(Value)
        _G.boxColor = Value
        ESP.BoxColor = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Box Filled Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "boxFilledColor",
    Callback = function(Value)
        _G.boxFilledColor = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Tracer Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TracerColor",
    Callback = function(Value)
        _G.TracerColor = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Skeleton Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TracerColohuggdfr",
    Callback = function(Value)
       getfenv().EspSettings.Skeletons.Color = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Head Dot Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TragfgfgfggkjhgfgcerColor",
    Callback = function(Value)
        getfenv().EspSettings.HeadDots.Color = Value
    end
})

Tab1:CreateColorPicker({
    Name = "Look Tracer Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "jbfbjdbbjdb",
    Callback = function(Value)
        getfenv().EspSettings.LookTracers.Color = Value
    end
})

Tab1:CreateLabel("Transparency Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

Tab1:CreateSlider({
    Name = "Box Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxTransparency",
    Callback = function(Value)
        _G.boxTransparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Box Filled Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxFilledTransparency",
    Callback = function(Value)
        _G.boxFilledTransparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Health Bar Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarTransparency",
    Callback = function(Value)
        _G.HealthBarTransparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTransparency",
    Callback = function(Value)
        _G.TracerTransparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Skeleton Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TraceghfvbvfdcdgrrTransparency",
    Callback = function(Value)
        getfenv().EspSettings.Skeletons.Transparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Head Dot Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTrabdydfgdrdghhhhhhhyhnsparency",
    Callback = function(Value)
        getfenv().EspSettings.HeadDots.Transparency = Value
    end,
})

Tab1:CreateSlider({
    Name = "Look Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTrahbvgdghhhhhhhhhhhhhhhhhhhhhhhrnsparency",
    Callback = function(Value)
        getfenv().EspSettings.LookTracers.Transparency = Value
    end,
})

Tab1:CreateLabel("Thickness Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

Tab1:CreateSlider({
    Name = "Box Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxThickness",
    Callback = function(Value)
        _G.boxThickness = Value
    end,
})

Tab1:CreateSlider({
    Name = "Health Bar Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarThickness",
    Callback = function(Value)
        _G.HealthBarThickness = Value
    end,
})

Tab1:CreateSlider({
    Name = "Tracer Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerThickness",
    Callback = function(Value)
        _G.TracerThickness = Value
    end,
})

Tab1:CreateSlider({
    Name = "Skeleton Thickness",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracefghfvbvfdcdgrrTransparency",
    Callback = function(Value)
        getfenv().EspSettings.Skeletons.Thickness = Value
    end,
})

Tab1:CreateSlider({
    Name = "Head Dot Thickness",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerhTrabdydfgdrdghhhhhhhyhnsparency",
    Callback = function(Value)
        getfenv().EspSettings.HeadDots.Thickness = Value
    end,
})

Tab1:CreateSlider({
    Name = "Look Tracer Thickness",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "Tracehhhhhhhhhhhhhhhhhhrnsparency",
    Callback = function(Value)
        getfenv().EspSettings.LookTracers.Thickness = Value
    end,
})

Tab1:CreateLabel("Other Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

Tab1:CreateDropdown({
    Name = "Teamcheck Mode",
    Options = {"colors", "invisible"},
    CurrentOption = {"colors"},
    MultipleOptions = false,
    Flag = "TeamcheckMode",
    Callback = function(Options)
        _G.teamcheckmode = Options[1]
    end,
})

Tab1:CreateDropdown({
    Name = "Health Bar Position",
    Options = {"Left", "Right"},
    CurrentOption = {"Left"},
    MultipleOptions = false,
    Flag = "HealthBarPosition",
    Callback = function(Options)
        _G.HealthBarPosition = Options[1]
    end,
})

Tab1:CreateDropdown({
    Name = "Tracer From",
    Options = {"Bottom", "Middle", "Top"},
    CurrentOption = {"Bottom"},
    MultipleOptions = false,
    Flag = "TracerFrom",
    Callback = function(Options)
        _G.TracerFrom = Options[1]
    end,
})

Rayfield:LoadConfiguration()
