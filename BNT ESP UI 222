-- ColorPicker Avançado com SV (Saturação/Valor) completo e Slider de Hue
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- Cria a ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AdvancedColorPicker"
ScreenGui.Parent = PlayerGui

-- Janela principal
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 320, 0, 320)
MainFrame.Position = UDim2.new(0.5, -160, 0.5, -160)
MainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
MainFrame.Parent = ScreenGui

-- Título
local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Title.Text = "Advanced Color Picker"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 24
Title.Parent = MainFrame

--------------------------------------------------------------------------------
-- 1. QUADRADO DE SATURAÇÃO/VALOR (SV)
--
-- O quadrado possui:
--   - Fundo: cor pura (base do hue selecionado);
--   - Overlay branco: gradiente da esquerda (branco) para a direita (transparente);
--   - Overlay preto: gradiente do topo (transparente) para a parte inferior (preto).
--------------------------------------------------------------------------------
local SVSquare = Instance.new("Frame")
SVSquare.Name = "SVSquare"
SVSquare.Size = UDim2.new(0, 200, 0, 200)
SVSquare.Position = UDim2.new(0, 10, 0, 50)
-- Inicia com o hue 0 (vermelho) com saturação e brilho máximos
SVSquare.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
SVSquare.BorderSizePixel = 0
SVSquare.Parent = MainFrame

-- Overlay branco: da esquerda (branco) para a direita (transparente)
local whiteOverlay = Instance.new("Frame")
whiteOverlay.Size = UDim2.new(1, 0, 1, 0)
whiteOverlay.BackgroundColor3 = Color3.new(1, 1, 1)
whiteOverlay.BorderSizePixel = 0
whiteOverlay.Parent = SVSquare

local whiteGradient = Instance.new("UIGradient")
whiteGradient.Parent = whiteOverlay
whiteGradient.Rotation = 0
whiteGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0),   -- esquerda: opaco (branco)
    NumberSequenceKeypoint.new(1, 1)    -- direita: transparente
})

-- Overlay preto: do topo (transparente) para a parte inferior (preto)
local blackOverlay = Instance.new("Frame")
blackOverlay.Size = UDim2.new(1, 0, 1, 0)
blackOverlay.BackgroundColor3 = Color3.new(0, 0, 0)
blackOverlay.BorderSizePixel = 0
blackOverlay.Parent = SVSquare

local blackGradient = Instance.new("UIGradient")
blackGradient.Parent = blackOverlay
blackGradient.Rotation = 90
blackGradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 1),   -- topo: transparente
    NumberSequenceKeypoint.new(1, 0)    -- fundo: opaco (preto)
})

-- Indicador para mostrar onde está a seleção dentro do quadrado
local SVIndicator = Instance.new("Frame")
SVIndicator.Size = UDim2.new(0, 10, 0, 10)
SVIndicator.AnchorPoint = Vector2.new(0.5, 0.5)
SVIndicator.BackgroundColor3 = Color3.new(1, 1, 1)
SVIndicator.BorderColor3 = Color3.new(0, 0, 0)
-- Posição inicial: canto superior direito (saturação máxima, brilho máximo)
SVIndicator.Position = UDim2.new(1, 0, 0, 0)
SVIndicator.Parent = SVSquare

--------------------------------------------------------------------------------
-- 2. SLIDER DE HUE (matiz)
--
-- Uma faixa vertical com degradê do arco‑íris para escolher a cor base.
--------------------------------------------------------------------------------
local HueSlider = Instance.new("Frame")
HueSlider.Name = "HueSlider"
HueSlider.Size = UDim2.new(0, 30, 0, 200)
HueSlider.Position = UDim2.new(0, 220, 0, 50)
HueSlider.BackgroundColor3 = Color3.new(1, 1, 1)
HueSlider.BorderSizePixel = 0
HueSlider.Parent = MainFrame

local hueGradient = Instance.new("UIGradient")
hueGradient.Parent = HueSlider
-- Usamos rotação 270 para que o degradê seja vertical (do topo para o fundo)
hueGradient.Rotation = 270
hueGradient.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
    ColorSequenceKeypoint.new(0.34, Color3.fromRGB(0, 255, 0)),
    ColorSequenceKeypoint.new(0.51, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.68, Color3.fromRGB(0, 0, 255)),
    ColorSequenceKeypoint.new(0.85, Color3.fromRGB(255, 0, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
})

-- Indicador do hue selecionado (uma linha horizontal)
local HueIndicator = Instance.new("Frame")
HueIndicator.Size = UDim2.new(1, 0, 0, 2)
HueIndicator.BackgroundColor3 = Color3.new(1, 1, 1)
HueIndicator.BorderSizePixel = 0
HueIndicator.Position = UDim2.new(0, 0, 0, 0)
HueIndicator.Parent = HueSlider

--------------------------------------------------------------------------------
-- 3. PREVIEW E BOTÃO DE FECHAR
--------------------------------------------------------------------------------
local ColorPreview = Instance.new("Frame")
ColorPreview.Size = UDim2.new(0, 50, 0, 50)
ColorPreview.Position = UDim2.new(0, 10, 0, 260)
ColorPreview.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
ColorPreview.BorderSizePixel = 0
ColorPreview.Parent = MainFrame

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 80, 0, 30)
CloseButton.Position = UDim2.new(1, -90, 0, 10)
CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
CloseButton.Text = "Fechar"
CloseButton.Font = Enum.Font.Gotham
CloseButton.TextColor3 = Color3.new(1, 1, 1)
CloseButton.TextSize = 18
CloseButton.Parent = MainFrame

CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

--------------------------------------------------------------------------------
-- VARIÁVEIS E FUNÇÕES DE ATUALIZAÇÃO
--------------------------------------------------------------------------------
local selectedHue = 0           -- [0, 1] – inicia com hue 0 (vermelho)
local selectedSaturation = 1    -- saturação (0 = pouca, 1 = total)
local selectedValue = 1         -- brilho (0 = escuro, 1 = claro)

local function updateFinalColor()
    local finalColor = Color3.fromHSV(selectedHue, selectedSaturation, selectedValue)
    ColorPreview.BackgroundColor3 = finalColor
end

local function updateSVSquareBase()
    -- Atualiza o fundo do quadrado SV para a cor pura do hue selecionado
    SVSquare.BackgroundColor3 = Color3.fromHSV(selectedHue, 1, 1)
end

--------------------------------------------------------------------------------
-- INTERAÇÃO COM O SLIDER DE HUE (suporte para mouse e toque)
--------------------------------------------------------------------------------
local hueDragging = false

HueSlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        hueDragging = true
        local pos = input.Position
        local relativeY = pos.Y - HueSlider.AbsolutePosition.Y
        local normalized = math.clamp(relativeY / HueSlider.AbsoluteSize.Y, 0, 1)
        -- Definindo o hue: invertemos para que o topo seja (por exemplo) vermelho
        selectedHue = 1 - normalized
        updateSVSquareBase()
        updateFinalColor()
        HueIndicator.Position = UDim2.new(0, 0, normalized, 0)
    end
end)

HueSlider.InputChanged:Connect(function(input)
    if hueDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                        input.UserInputType == Enum.UserInputType.Touch) then
        local pos = input.Position
        local relativeY = pos.Y - HueSlider.AbsolutePosition.Y
        local normalized = math.clamp(relativeY / HueSlider.AbsoluteSize.Y, 0, 1)
        selectedHue = 1 - normalized
        updateSVSquareBase()
        updateFinalColor()
        HueIndicator.Position = UDim2.new(0, 0, normalized, 0)
    end
end)

HueSlider.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        hueDragging = false
    end
end)

--------------------------------------------------------------------------------
-- INTERAÇÃO COM O QUADRADO DE SATURAÇÃO/VALOR (SV)
--------------------------------------------------------------------------------
local svDragging = false

SVSquare.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        svDragging = true
        local pos = input.Position
        local relX = math.clamp((pos.X - SVSquare.AbsolutePosition.X) / SVSquare.AbsoluteSize.X, 0, 1)
        local relY = math.clamp((pos.Y - SVSquare.AbsolutePosition.Y) / SVSquare.AbsoluteSize.Y, 0, 1)
        selectedSaturation = relX
        selectedValue = 1 - relY  -- como o topo é brilho máximo
        SVIndicator.Position = UDim2.new(relX, 0, relY, 0)
        updateFinalColor()
    end
end)

SVSquare.InputChanged:Connect(function(input)
    if svDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                       input.UserInputType == Enum.UserInputType.Touch) then
        local pos = input.Position
        local relX = math.clamp((pos.X - SVSquare.AbsolutePosition.X) / SVSquare.AbsoluteSize.X, 0, 1)
        local relY = math.clamp((pos.Y - SVSquare.AbsolutePosition.Y) / SVSquare.AbsoluteSize.Y, 0, 1)
        selectedSaturation = relX
        selectedValue = 1 - relY
        SVIndicator.Position = UDim2.new(relX, 0, relY, 0)
        updateFinalColor()
    end
end)

SVSquare.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        svDragging = false
    end
end)
