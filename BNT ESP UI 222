local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = game.Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local ESP_Boxes = {}

local function CreateCornerBox()
    local thickness = 1 -- Diminui a espessura para melhorar a aparência
    local box = {
        TopLeft = Drawing.new("Line"),
        TopLeftVertical = Drawing.new("Line"),
        TopRight = Drawing.new("Line"),
        TopRightVertical = Drawing.new("Line"),
        BottomLeft = Drawing.new("Line"),
        BottomLeftVertical = Drawing.new("Line"),
        BottomRight = Drawing.new("Line"),
        BottomRightVertical = Drawing.new("Line")
    }
    
    for _, line in pairs(box) do
        line.Color = Color3.fromRGB(255, 0, 0)
        line.Thickness = thickness
        line.Visible = false
    end
    
    return box
end

RunService.RenderStepped:Connect(function()
    for _, v in pairs(Players:GetPlayers()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local RootPart = v.Character.HumanoidRootPart
            local Head = v.Character.Head
            
            local HeadOff = Vector3.new(0, 0.5, 0)
            local LegOff = Vector3.new(0, 3, 0)
            
            local RootPosition, RootVis = Camera:WorldToViewportPoint(RootPart.Position)
            local HeadPosition = Camera:WorldToViewportPoint(Head.Position + HeadOff)
            local LegPosition = Camera:WorldToViewportPoint(RootPart.Position - LegOff)
            
            if not ESP_Boxes[v] then
                ESP_Boxes[v] = CreateCornerBox()
            end
            
            local box = ESP_Boxes[v]
            
            if RootVis then
                local BoxSize = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                local BoxPosition = Vector2.new(RootPosition.X - BoxSize.X / 2, RootPosition.Y - BoxSize.Y / 2)
                local cornerLength = BoxSize.X * 0.2
                
                -- Atualiza posições das linhas
                box.TopLeft.From = BoxPosition
                box.TopLeft.To = BoxPosition + Vector2.new(cornerLength, 0)
                
                box.TopLeftVertical.From = BoxPosition
                box.TopLeftVertical.To = BoxPosition + Vector2.new(0, cornerLength)
                
                box.TopRight.From = BoxPosition + Vector2.new(BoxSize.X, 0)
                box.TopRight.To = box.TopRight.From - Vector2.new(cornerLength, 0)
                
                box.TopRightVertical.From = BoxPosition + Vector2.new(BoxSize.X, 0)
                box.TopRightVertical.To = box.TopRightVertical.From + Vector2.new(0, cornerLength)
                
                box.BottomLeft.From = BoxPosition + Vector2.new(0, BoxSize.Y)
                box.BottomLeft.To = box.BottomLeft.From + Vector2.new(cornerLength, 0)
                
                box.BottomLeftVertical.From = BoxPosition + Vector2.new(0, BoxSize.Y)
                box.BottomLeftVertical.To = box.BottomLeftVertical.From - Vector2.new(0, cornerLength)
                
                box.BottomRight.From = BoxPosition + BoxSize
                box.BottomRight.To = box.BottomRight.From - Vector2.new(cornerLength, 0)
                
                box.BottomRightVertical.From = BoxPosition + BoxSize
                box.BottomRightVertical.To = box.BottomRightVertical.From - Vector2.new(0, cornerLength)
                
                -- Torna visível
                for _, line in pairs(box) do
                    line.Visible = true
                end
            else
                -- Esconde as linhas quando o player não está visível
                for _, line in pairs(box) do
                    line.Visible = false
                end
            end
        end
    end
end)
