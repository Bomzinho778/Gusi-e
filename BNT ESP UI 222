local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local lplr = game.Players.LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera
local currentCamera = workspace.CurrentCamera
local worldToViewportPoint = currentCamera.worldToViewportPoint

local HeadOff = Vector3.new(0, 0.5, 0)
local LegOff = Vector3.new(0, 3, 0)

_G.temcheck = false
_G.temcheckmode = "colors"
_G.teamcolor = Color3.new(0, 1, 0)
_G.enemycolor = Color3.new(1, 0, 0)

_G.boxColor = Color3.new(0, 0, 0)
_G.boxThickness = 1
_G.boxTransparency = 1
_G.boxVisible = false

_G.boxFilledColor = Color3.new(0, 0, 0)
_G.boxFilledTransparency = 0.5
_G.boxFilledVisible = false

_G.HealthBarThickness = 1
_G.HealthBarVisible = false
_G.HealthBarTransparency = 1
_G.HealthBarColor = Color3.new(0, 1, 0)
_G.HealthBarFilled = true

_G.HealthBarPosition = "Left"

_G.TracerVisible = false
_G.TracerThickness = 1.5
_G.TracerTransparency = 1
_G.TracerColor = Color3.new(0, 0, 0)

_G.TracerFrom = "Bottom"

--Skeleton
local WAIT = task.wait
local TBINSERT = table.insert
local TBFIND = table.find
local TBREMOVE = table.remove
local V2 = Vector2.new
local ROUND = math.round

local RS = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local To2D = Camera.WorldToViewportPoint
local LocalPlayer = game.Players.LocalPlayer

-- Only thing for now is Skeleton
local Library = {};
Library.__index = Library;

-- Functions
function Library:NewLine(info)
	local l = Drawing.new("Line")
	l.Visible = info.Visible or true;
	l.Color = info.Color or Color3.fromRGB(0,255,0);
	l.Transparency = info.Transparency or 1;
	l.Thickness = info.Thickness or 1;
	return l
end

function Library:Smoothen(v)
	return V2(ROUND(v.X), ROUND(v.Y))
end

-- Skeleton Object
local Skeleton = {
	Removed = false;
	Player = nil;
	Visible = false;
	Lines = {};
	Color = Color3.fromRGB(0,255,0);
	Alpha = 1;
	Thickness = 1;
	DoSubsteps = true;
}
Skeleton.__index = Skeleton;

function Skeleton:UpdateStructure()
	if not self.Player.Character then return end

	self:RemoveLines();

	for _, part in next, self.Player.Character:GetChildren() do		
		if not part:IsA("BasePart") then
			continue;
		end

		for _, link in next, part:GetChildren() do			
			if not link:IsA("Motor6D") then
				continue;
			end
			
			TBINSERT(
				self.Lines,
				{
					Library:NewLine({
						Visible = self.Visible;
						Color = self.Color;
						Transparency = self.Alpha;
						Thickness = self.Thickness;
					}),
					Library:NewLine({
						Visible = self.Visible;
						Color = self.Color;
						Transparency = self.Alpha;
						Thickness = self.Thickness;
					}),
					part.Name,
					link.Name
				}
			);
		end
	end
end

function Skeleton:SetVisible(State)
	for _,l in pairs(self.Lines) do
		l[1].Visible = State;
		l[2].Visible = State;
	end
end

function Skeleton:SetColor(Color)
	self.Color = Color;
	for _,l in pairs(self.Lines) do
		l[1].Color = Color;
		l[2].Color = Color;
	end
end

function Skeleton:SetAlpha(Alpha)
	self.Alpha = Alpha;
	for _,l in pairs(self.Lines) do
		l[1].Transparency = Alpha;
		l[2].Transparency = Alpha;
	end
end

function Skeleton:SetThickness(Thickness)
	self.Thickness = Thickness;
	for _,l in pairs(self.Lines) do
		l[1].Thickness = Thickness;
		l[2].Thickness = Thickness;
	end
end

function Skeleton:SetDoSubsteps(State)
	self.DoSubsteps = State;
end

-- Main Update Loop
function Skeleton:Update()
	if self.Removed then
		return;
	end

	local Character = self.Player.Character;
	if not Character then
		self:SetVisible(false);
		if not self.Player.Parent then
			self:Remove();
		end
		return;
	end

	local Humanoid = Character:FindFirstChildOfClass("Humanoid");
	if not Humanoid then
		self:SetVisible(false);
		return;
	end

	self:SetColor(self.Color);
	self:SetAlpha(self.Alpha);
	self:SetThickness(self.Thickness);

	local update = false;
	for _, l in pairs(self.Lines) do
		local part = Character:FindFirstChild(l[3])
		if not part then
			l[1].Visible = false;
			l[2].Visible = false;
			update = true;
			continue;
		end

		local link = part:FindFirstChild(l[4])
		if not (link and link.part0 and link.part1) then
			l[1].Visible = false;
			l[2].Visible = false;
			update = true;
			continue;
		end

		local part0 = link.Part0;
		local part1 = link.Part1;
		
		if self.DoSubsteps and link.C0 and link.C1 then
			local c0 = link.C0;
			local c1 = link.C1;

			-- Center of part0 to c0
			local part0p, v1 = To2D(Camera, part0.CFrame.p);
			local part0cp, v2 = To2D(Camera, (part0.CFrame * c0).p);
			
			if v1 and v2 then
				l[1].From = V2(part0p.x, part0p.y);
				l[1].To = V2(part0cp.x, part0cp.y);

				l[1].Visible = true;
			else 
				l[1].Visible = false;
			end
			
			-- Center of part1 to c1
			local part1p, v3 = To2D(Camera, part1.CFrame.p);
			local part1cp, v4 = To2D(Camera, (part1.CFrame * c1).p);
		
			if v3 and v4 then
				l[2].From = V2(part1p.x, part1p.y);
				l[2].To = V2(part1cp.x, part1cp.y);

				l[2].Visible = true;
			else 
				l[2].Visible = false;
			end
		else					
			local part0p, v1 = To2D(Camera, part0.CFrame.p);
			local part1p, v2 = To2D(Camera, part1.CFrame.p);
			
			if v1 and v2 then
				l[1].From = V2(part0p.x, part0p.y);
				l[1].To = V2(part1p.x, part1p.y);

				l[1].Visible = true;
			else 
				l[1].Visible = false;
			end
			
			l[2].Visible = false;
		end
	end
	
	if update or #self.Lines == 0 then
		self:UpdateStructure();
	end
end

function Skeleton:Toggle()
	self.Visible = not self.Visible;

	if self.Visible then 
		self:RemoveLines();
		self:UpdateStructure();
		
		local c;c = RS.Heartbeat:Connect(function()
			if not self.Visible then
				self:SetVisible(false);
				c:Disconnect();
				return;
			end

			self:Update();
		end)
	end
end

function Skeleton:RemoveLines()
	for _,l in pairs(self.Lines) do
		l[1]:Remove();
		l[2]:Remove();
	end
	self.Lines = {};
end

function Skeleton:Remove()
	self.Removed = true;
	self:RemoveLines();
end

-- Create Skeleton Function
function Library:NewSkeleton(Player, Visible, Color, Alpha, Thickness, DoSubsteps)
	if not Player then
		error("Missing Player argument (#1)")
	end
	
	local s = setmetatable({}, Skeleton);

	s.Player = Player;
	s.Bind = Player.UserId;
	
	if DoSubsteps ~= nil then
		s.DoSubsteps = DoSubsteps;
	end
	
	if Color then
		s:SetColor(Color)
	end
	
	if Alpha then
		s:SetAlpha(Alpha)
	end
	
	if Thickness then
		s:SetThickness(Thickness)
	end

	if Visible then
		s:Toggle();
	end

	return s;
end

-- LIBRARY FORMAT
if true then
	return Library;
end

-- TEST
if false then

	local Skeletons = {}
	for _, Player in next, game.Players:GetChildren() do
		if Player ~= LocalPlayer then
			table.insert(Skeletons, Library:NewSkeleton(Player, true));
		end
	end
	game.Players.PlayerAdded:Connect(function(Player)
		table.insert(Skeletons, Library:NewSkeleton(Player, true));
	end)
end


local function getTracerFromPosition()
    if _G.TracerFrom == "Bottom" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
    elseif _G.TracerFrom == "Middle" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    elseif _G.TracerFrom == "Top" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 4)
    end
end

local function createDrawingObjects()
    local Box = Drawing.new("Square")
    Box.Visible = _G.boxVisible
    Box.Color = _G.boxColor
    Box.Thickness = _G.boxThickness
    Box.Transparency = _G.boxTransparency
    Box.Filled = false

    local BoxFilled = Drawing.new("Square")
    BoxFilled.Visible = _G.boxFilledVisible
    BoxFilled.Color = _G.boxFilledColor
    BoxFilled.Transparency = _G.boxFilledTransparency
    BoxFilled.Filled = true

    local HealthBar = Drawing.new("Square")
    HealthBar.Thickness = _G.HealthBarThickness
    HealthBar.Visible = _G.HealthBarVisible
    HealthBar.Transparency = _G.HealthBarTransparency
    HealthBar.Color = _G.HealthBarColor
    HealthBar.Filled = _G.HealthBarFilled

    local Tracer = Drawing.new("Line")
    Tracer.Visible = _G.TracerVisible
    Tracer.Thickness = _G.TracerThickness
    Tracer.Transparency = _G.TracerTransparency
    Tracer.Color = _G.TracerColor

    return Box, BoxFilled, HealthBar, Tracer
end

local function updateDrawingObjects(Box, BoxFilled, HealthBar, Tracer)
    Box.Color = _G.boxColor
    Box.Thickness = _G.boxThickness
    Box.Transparency = _G.boxTransparency
    Box.Visible = _G.boxVisible

    BoxFilled.Color = _G.boxFilledColor
    BoxFilled.Transparency = _G.boxFilledTransparency
    BoxFilled.Visible = _G.boxFilledVisible

    HealthBar.Thickness = _G.HealthBarThickness
    HealthBar.Visible = _G.HealthBarVisible
    HealthBar.Transparency = _G.HealthBarTransparency
    HealthBar.Color = _G.HealthBarColor
    HealthBar.Filled = _G.HealthBarFilled

    Tracer.Visible = _G.TracerVisible
    Tracer.Thickness = _G.TracerThickness
    Tracer.Transparency = _G.TracerTransparency
    Tracer.Color = _G.TracerColor
end

local function getHealthValues(player)
    local maxHealth, health
    if player:FindFirstChild("NRPBS") then
        maxHealth = player.NRPBS["MaxHealth"].Value
        health = player.NRPBS["Health"].Value
    else
        maxHealth = player.Character.Humanoid.MaxHealth
        health = player.Character.Humanoid.Health
    end
    return maxHealth, health
end

local function updateHealthBarPosition(HealthBar, Box, HeadPosition, LegPosition, RootPosition, isOutline, maxHealth, health)
    local offset = isOutline and 6 or 4
    local healthBarSize = (HeadPosition.Y - LegPosition.Y) / (maxHealth / math.clamp(health, 0, maxHealth))

    if _G.HealthBarPosition == "Left" then
        HealthBar.Position = Vector2.new(Box.Position.X - offset, Box.Position.Y + (1 / healthBarSize))
    elseif _G.HealthBarPosition == "Right" then
        HealthBar.Position = Vector2.new(Box.Position.X + Box.Size.X + offset - 2, Box.Position.Y + (1 / healthBarSize))
    end

    HealthBar.Size = Vector2.new(2, healthBarSize)
end

local function setupPlayerBox(v)
    local Box, BoxFilled, HealthBar, Tracer = createDrawingObjects()

    game:GetService("RunService").RenderStepped:Connect(function()
        updateDrawingObjects(Box, BoxFilled, HealthBar, Tracer)

        if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v ~= lplr and v.Character.Humanoid.Health > 0 then
            local Vector, onScreen = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)

            local RootPart = v.Character.HumanoidRootPart
            local Head = v.Character.Head
            local RootPosition, RootVis = worldToViewportPoint(currentCamera, RootPart.Position)
            local HeadPosition = worldToViewportPoint(currentCamera, Head.Position + HeadOff)
            local LegPosition = worldToViewportPoint(currentCamera, RootPart.Position - LegOff)

            if onScreen then
                local maxHealth, health = getHealthValues(v)

                Box.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                Box.Position = Vector2.new(RootPosition.X - Box.Size.X / 2, RootPosition.Y - Box.Size.Y / 2)
                Box.Visible = _G.boxVisible

                BoxFilled.Size = Vector2.new(1000 / RootPosition.Z, HeadPosition.Y - LegPosition.Y)
                BoxFilled.Position = Vector2.new(RootPosition.X - Box.Size.X / 2, RootPosition.Y - Box.Size.Y / 2)
                BoxFilled.Visible = _G.boxFilledVisible

                HealthBar.Size = Vector2.new(2, (HeadPosition.Y - LegPosition.Y) / (maxHealth / math.clamp(health, 0, maxHealth)))
                updateHealthBarPosition(HealthBar, Box, HeadPosition, LegPosition, RootPosition, false, maxHealth, health)
                HealthBar.Color = Color3.fromRGB(255 - 255 / (maxHealth / health), 255 / (maxHealth / health), 0)
                HealthBar.Visible = _G.HealthBarVisible

                Tracer.From = getTracerFromPosition()
                Tracer.To = Vector2.new(Vector.X, Vector.Y)

                if _G.teamcheck == true then
                    if _G.temcheckmode == "colors" then
                        if v.TeamColor == lplr.TeamColor then
                            Box.Color = _G.teamcolor
                            BoxFilled.Color = _G.teamcolor
                            Tracer.Color = _G.teamcolor
                        else
                            Box.Color = _G.enemycolor
                            BoxFilled.Color = _G.enemycolor
                            Tracer.Color = _G.enemycolor
                        end
                    elseif _G.temcheckmode == "invisible" then
                        if v.TeamColor == lplr.TeamColor then
                            Box.Visible = false
                            BoxFilled.Visible = false
                            HealthBar.Visible = false
                            Tracer.Visible = false
                            skel_settings.Visible = false
                        else
                            Box.Color = _G.enemycolor
                            BoxFilled.Color = _G.enemycolor
                            Tracer.Color = _G.enemycolor
                        end
                    end
                end
            else
                Box.Visible = false
                BoxFilled.Visible = false
                HealthBar.Visible = false
                Tracer.Visible = false
                Box.Color = _G.boxColor
                BoxFilled.Color = _G.boxFilledColor
                Tracer.Color = _G.TracerColor
                skel_settings.Visible = false
            end
        else
            Box.Visible = false
            BoxFilled.Visible = false
            HealthBar.Visible = false
            Tracer.Visible = false
            skel_settings.Visible = false
        end
    end)
end

for _, player in pairs(game.Players:GetChildren()) do
    setupPlayerBox(player)
end

game.Players.PlayerAdded:Connect(function(player)
    setupPlayerBox(player)
end)

local Window = Rayfield:CreateWindow({
    Name = "BNT ESP",
    Icon = 0,
    LoadingTitle = "By Bomzinho",
    LoadingSubtitle = "Loading....",
    Theme = "Amethyst",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ESPP"
    },

    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },

    KeySystem = true,
    KeySettings = {
        Title = "BNT ESP",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"4321", "1234"}
    }
})

local Tab1 = Window:CreateTab("Aimbot", 4483362458)

local Tab = Window:CreateTab("ESP", 4483362458)

local Label = Tab:CreateLabel("Geral KeySettings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Toggle = Tab:CreateToggle({
    Name = "Show Box",
    CurrentValue = false,
    Flag = "Show Box",
    Callback = function(Value)
        _G.boxVisible = Value
    end,
})

local Toggle1 = Tab:CreateToggle({
    Name = "Box Filled",
    CurrentValue = false,
    Flag = "BoxFilled",
    Callback = function(Value)
        _G.boxFilledVisible = Value
    end,
})

local Toggle2 = Tab:CreateToggle({
    Name = "Show Health Bar",
    CurrentValue = false,
    Flag = "healthbarouf",
    Callback = function(Value)
        _G.HealthBarVisible = Value
    end,
})

local Toggle3 = Tab:CreateToggle({
    Name = "Health Bar Filled",
    CurrentValue = false,
    Flag = "healthbarouff",
    Callback = function(Value)
        _G.HealthBarFilled = Value
    end,
})

local Toggle4 = Tab:CreateToggle({
    Name = "Show Tracer",
    CurrentValue = false,
    Flag = "TracerVisible",
    Callback = function(Value)
        _G.TracerVisible = Value
    end,
})

local Toggle5 = Tab:CreateToggle({
    Name = "Show Skeleton",
    CurrentValue = false,
    Flag = "TracerVisible",
    Callback = function(Value)
        Skeleton.Visible = Value
    end,
})

local Toggle6 = Tab:CreateToggle({
    Name = "Teamcheck",
    CurrentValue = false,
    Flag = "teamcheck",
    Callback = function(Value)
        _G.teamcheck = Value
    end,
})

local Label1 = Tab:CreateLabel("Color Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local ColorPicker1 = Tab:CreateColorPicker({
    Name = "Team Color",
    Color = Color3.fromRGB(0, 255, 0),
    Flag = "teamcolor",
    Callback = function(Value)
        _G.teamcolor = Value
    end
})

local ColorPicker2 = Tab:CreateColorPicker({
    Name = "Enemy Color",
    Color = Color3.fromRGB(255, 0, 0),
    Flag = "enemycolor",
    Callback = function(Value)
        _G.enemycolor = Value
    end
})

local ColorPicker3 = Tab:CreateColorPicker({
    Name = "Box Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "boxColor",
    Callback = function(Value)
        _G.boxColor = Value
    end
})

local ColorPicker4 = Tab:CreateColorPicker({
    Name = "Box Filled Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "boxFilledColor",
    Callback = function(Value)
        _G.boxFilledColor = Value
    end
})

local ColorPicker5 = Tab:CreateColorPicker({
    Name = "Tracer Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TracerColor",
    Callback = function(Value)
        _G.TracerColor = Value
    end
})

local ColorPicker6 = Tab:CreateColorPicker({
    Name = "Skeleton Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TracerColor",
    Callback = function(Value)
        Skeleton.Color = Value
    end
})

local Label2 = Tab:CreateLabel("Transparency Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Slider1 = Tab:CreateSlider({
    Name = "Box Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxTransparency",
    Callback = function(Value)
        _G.boxTransparency = Value
    end,
})

local Slider2 = Tab:CreateSlider({
    Name = "Box Filled Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxFilledTransparency",
    Callback = function(Value)
        _G.boxFilledTransparency = Value
    end,
})

local Slider3 = Tab:CreateSlider({
    Name = "Health Bar Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarTransparency",
    Callback = function(Value)
        _G.HealthBarTransparency = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTransparency",
    Callback = function(Value)
        _G.TracerTransparency = Value
    end,
})

local Label3 = Tab:CreateLabel("Thickness Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Slider6 = Tab:CreateSlider({
    Name = "Box Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxThickness",
    Callback = function(Value)
        _G.boxThickness = Value
    end,
})

local Slider7 = Tab:CreateSlider({
    Name = "Health Bar Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarThickness",
    Callback = function(Value)
        _G.HealthBarThickness = Value
    end,
})

local Slider8 = Tab:CreateSlider({
    Name = "Tracer Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerThickness",
    Callback = function(Value)
        _G.TracerThickness = Value
    end,
})

local Slider9 = Tab:CreateSlider({
    Name = "Skeleton Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerThickness",
    Callback = function(Value)
        Skeleton.Thickness = Value
    end,
})

local Label4 = Tab:CreateLabel("Other Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Dropdown1 = Tab:CreateDropdown({
    Name = "Teamcheck Mode",
    Options = {"colors", "invisible"},
    CurrentOption = {"colors"},
    MultipleOptions = false,
    Flag = "TeamcheckMode",
    Callback = function(Options)
        _G.temcheckmode = Options[1]
    end,
})

local Dropdown2 = Tab:CreateDropdown({
    Name = "Health Bar Position",
    Options = {"Left", "Right"},
    CurrentOption = {"Left"},
    MultipleOptions = false,
    Flag = "HealthBarPosition",
    Callback = function(Options)
        _G.HealthBarPosition = Options[1]
    end,
})

local Dropdown3 = Tab:CreateDropdown({
    Name = "Tracer From",
    Options = {"Bottom", "Middle", "Top"},
    CurrentOption = {"Bottom"},
    MultipleOptions = false,
    Flag = "TracerFrom",
    Callback = function(Options)
        _G.TracerFrom = Options[1]
    end,
})

Rayfield:LoadConfiguration()
