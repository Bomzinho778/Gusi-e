local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
local Window = OrionLib:MakeWindow({Name = "Bom_Hub_Aim_V5", HidePremium = true, SaveConfig = true, ConfigFolder = "SilentAimSettings"})

local tab1 = Window:MakeTab({Name = "Aimbot", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local SilentAimEnabled = false
local WallCheckEnabled = false
local FOV = 50
local FOVVisible = false
local FOVPosition = "Center"
local FOVCircle = Drawing.new("Circle")
local TeamCheckEnabled = false
local targetPart = "Head"

FOVCircle.Radius = FOV
FOVCircle.Thickness = 1
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Transparency = 1
FOVCircle.Visible = FOVVisible
FOVCircle.Filled = false
FOVCircle.Position = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)

local function getFOVPosition()
    local camera = workspace.CurrentCamera
    if FOVPosition == "Center" then
        return Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    else
        local mouse = game.Players.LocalPlayer:GetMouse()
        return Vector2.new(mouse.X, mouse.Y)
    end
end

local function isPlayerInFOV(player)
    local mousePos = getFOVPosition()
    if player.Character and player.Character:FindFirstChild(targetPart) then
        local charPart = player.Character:FindFirstChild(targetPart)
        local screenPos = workspace.CurrentCamera:WorldToViewportPoint(charPart.Position)
        local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude

        return distance <= FOV
    end
    return false
end

local function isVisible(target)
    if WallCheckEnabled then
        if not target or not target.Character or not target.Character:FindFirstChild(targetPart) then
            return false
        end

        local camera = workspace.CurrentCamera
        local targetPartPos = target.Character[targetPart].Position
        local rayOrigin = camera.CFrame.Position
        local rayDirection = (targetPartPos - rayOrigin).Unit * (targetPartPos - rayOrigin).Magnitude

        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {game.Players.LocalPlayer.Character}

        local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)

        if raycastResult and raycastResult.Instance then
            return raycastResult.Instance:IsDescendantOf(target.Character)
        end
    end
    return true
end

local function isInFrontOfCamera(player)
    if player.Character and player.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local targetPartPos = player.Character[targetPart].Position
        local cameraDirection = camera.CFrame.LookVector
        local directionToPlayer = (targetPartPos - camera.CFrame.Position).Unit

        local dotProduct = cameraDirection:Dot(directionToPlayer)
        return dotProduct > 0
    end
    return false
end

local function getClosestPlayer()
    local closestPlayer = nil
    local players = game.Players:GetPlayers()
    local closestDistance = math.huge
    local mousePos = getFOVPosition()

    for _, player in pairs(players) do
        if player ~= game.Players.LocalPlayer and isVisible(player) then
            if TeamCheckEnabled and player.Team == game.Players.LocalPlayer.Team then
                continue
            end

            if isPlayerInFOV(player) and isInFrontOfCamera(player) then
                local charPart = player.Character:FindFirstChild(targetPart)
                if charPart then
                    local screenPos = workspace.CurrentCamera:WorldToViewportPoint(charPart.Position)
                    local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude

                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = player
                    end
                end
            end
        end
    end

    return closestPlayer
end

local function aimAt(target)
    if target and target.Character and target.Character:FindFirstChild(targetPart) then
        local camera = workspace.CurrentCamera
        local aimPosition = target.Character[targetPart].Position
        camera.CFrame = CFrame.new(camera.CFrame.Position, aimPosition)
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if SilentAimEnabled then
        local target = getClosestPlayer()
        if target then
            aimAt(target)
        end
    end

    FOVCircle.Position = getFOVPosition()
    FOVCircle.Radius = FOV
    FOVCircle.Visible = FOVVisible
end)

tab1:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(value)
        SilentAimEnabled = value
    end
})

tab1:AddToggle({
    Name = "Enable Team Check",
    Default = true,
    Callback = function(value)
        TeamCheckEnabled = value
    end
})

tab1:AddToggle({
    Name = "Enable Wall Check",
    Default = true,
    Callback = function(value)
        WallCheckEnabled = value
    end
})

tab1:AddDropdown({
    Name = "Body Part",
    Default = "Head",
    Options = {"Head", "HumanoidRootPart"},
    Callback = function(selected)
        targetPart = selected
    end
})

tab1:AddDropdown({
    Name = "FOV Position",
    Default = "Center",
    Options = {"Center", "Finger"},
    Callback = function(option)
        FOVPosition = option
    end
})

tab1:AddTextbox({
    Name = "FOV Size (0 - 1000)",
    Default = "50",
    TextDisappear = true,
    Callback = function(value)
        local size = tonumber(value)
        if size and size >= 0 and size <= 1000 then
            FOV = size
        else
            warn("Invalid size! Use a value between 0 and 1000.")
        end
    end
})

tab1:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(value)
        FOVVisible = value
    end
})

tab1:AddColorPicker({
    Name = "FOV Color",
    Default = Color3.new(255, 255, 255),
    Callback = function(color)
        FOVCircle.Color = color
    end
})

OrionLib:Init()
