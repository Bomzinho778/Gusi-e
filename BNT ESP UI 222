local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

_G.temcheck = false

_G.boxColor = Color3.new(0, 0, 0)
_G.boxThickness = 1
_G.boxTransparency = 1
_G.boxVisible = false
_G.ShowBox = false

_G.HealthBarThickness = 1
_G.HealthBarVisible = false
_G.HealthBarTransparency = 1
_G.HealthBarColor = Color3.new(0, 1, 0)

_G.HealthBarPosition = "Left"

_G.TracerVisible = false
_G.TracerThickness = 1.5
_G.TracerTransparency = 1
_G.TracerColor = Color3.new(0, 0, 0)

_G.TracerFrom = "Bottom"

_G.Name = false

_G.Textsc = Color3.new(0, 0, 0)
_G.Textss = 13

_G.Distance = false

_G.Health = false

_G.ShowSkel = false
_G.skelcol = Color3.new(1, 1, 1)
_G.skeltranspa = 1
_G.skelthick = 1.5

_G.Showhd = false
_G.hdcol = Color3.new(1, 1, 1)
_G.hdtranspa = 1
_G.hdthick = 1.5

_G.Showlt = false
_G.ltcol = Color3.new(1, 1, 1)
_G.lttranspa = 1
_G.ltthick = 1.5

getgenv().EspSettings = {
	TeamCheck = _G.teamcheck,
	ToggleKey = "",
	RefreshRate = 10, -- how fast the esp updates (milliseconds)
	MaximumDistance = 500, -- only renders players within this distance
	FaceCamera = true, -- Makes esp appear 2D
	AlignPoints = true, -- Improves 2D effect; only works while FaceCamera is enabled
	-- AlignPoints: This may cause esp to have abnormal behavior when looking from certain angles
	MouseVisibility = {
		Enabled = false, -- makes any drawing objects transparent when they are near your mouse
		Radius = 60,
		Transparency = 0.3,
		Method = "Hover", -- "Radius" or "Hover" | Hover is newest method and is a lot more accurate than Radius
		HoverRadius = 50,
		Selected = { -- set any of these to false to ignore them
			Boxes = true,
			Tracers = true,
			Names = true,
			Skeletons = true,
			HealthBars = true,
			HeadDots = true,
			LookTracers = true
		}
	},
	Highlights = {
		Enabled = false,
		Players = {game.Players}, -- put player usernames into this table to 'highlight' them
		Transparency = 1,
		Color = Color3.fromRGB(255, 150, 0),
		AlwaysOnTop = true
	},
	NPC = {
		Color = Color3.fromRGB(150,150,150),
		Transparency = 1,
		RainbowColor = false,
		Overrides = {
			Boxes = false,
			Tracers = false,
			Names = false,
			Skeletons = false,
			HealthBars = false,
			HeadDots = false,
			LookTracers = false
		}
	},
	Boxes = {
		Enabled = _G.boxVisible,
		Transparency = _G.boxTransparency,
		Color = _G.boxColor,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = _G.boxThickness
	},
	Tracers = {
		Enabled = _G.TracerVisible,
		Transparency = _G.TracerTransparency,
		Color = _G.TracerColor,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Origin = _G.TracerFrom, -- "Top" or "Center" or "Bottom" or "Mouse"
		Thickness = _G.TracerThickness
	},
	Names = {
		Enabled = _G.Name,
		Transparency = 1,
		Color = _G.Textsc,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = true,
		OutlineColor = Color3.fromRGB(0,0,0),
		Font = Drawing.Fonts.UI, -- UI or System or Plex or Monospace
		Size = _G.Textss,
		ShowDistance = _G.Distance,
		ShowHealth = _G.Health,
		UseDisplayName = false,
		DistanceDataType = "m", -- what it says after the distance (ex. 100m)
		HealthDataType = "Percentage" -- "Percentage" or "Value"
	},
	Skeletons = {
		Enabled = _G.ShowSkel,
        Transparency = _G.skeltranspa,
		Color = _G.skelcol,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = _G.skelthick
	},
	HealthBars = {
		Enabled = _G.HealthBarVisible,
		Transparency = _G.HealthBarTransparency,
		Color = _G.HealthBarColor,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Origin = _G.HealthBarPosition, -- "None" or "Left" or "Right"
		OutlineBarOnly = true
	},
	HeadDots = {
		Enabled = _G.Showhd,
		Transparency = _G.hdtranspa,
		Color = _G.hdcol,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = false,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = _G.hdthick,
		Filled = false,
		Scale = 1
	},
	LookTracers = {
		Enabled = _G.Showlt,
		Transparency = _G.lttranspa,
		Color = _G.ltcol,
		UseTeamColor = false,
		RainbowColor = false,
		Outline = true,
		OutlineColor = Color3.fromRGB(0,0,0),
		OutlineThickness = 1,
		Thickness = _G.ltthick,
		Length = 5
	}
} -- v1.6.14
loadstring(game:HttpGet("https://raw.githubusercontent.com/Bomzinho778/Gusi-e/refs/heads/main/BTN%20ESP%20Library", "BTN ESP Library"))()

local Window = Rayfield:CreateWindow({
    Name = "BNT ESP",
    Icon = 0,
    LoadingTitle = "By Bomzinho",
    LoadingSubtitle = "Loading....",
    Theme = "Amethyst",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "ESPP"
    },

    Discord = {
        Enabled = false,
        Invite = "",
        RememberJoins = true
    },

    KeySystem = true,
    KeySettings = {
        Title = "BNT ESP",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"4321", "1234"}
    }
})

local Tab1 = Window:CreateTab("Aimbot", 4483362458)

local Tab = Window:CreateTab("ESP", 4483362458)

local Label = Tab:CreateLabel("Geral KeySettings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Toggle = Tab:CreateToggle({
    Name = "Show Box",
    CurrentValue = false,
    Flag = "Show Box",
    Callback = function(Value)
        _G.boxVisible = Value
    end,
})

local Toggle2 = Tab:CreateToggle({
    Name = "Show Health Bar",
    CurrentValue = false,
    Flag = "healthbarouf",
    Callback = function(Value)
        _G.HealthBarVisible = Value
    end,
})

local Toggle3 = Tab:CreateToggle({
    Name = "Health Bar Filled",
    CurrentValue = false,
    Flag = "healthbarouff",
    Callback = function(Value)
        _G.HealthBarFilled = Value
    end,
})

local Toggle4 = Tab:CreateToggle({
    Name = "Show Name",
    CurrentValue = false,
    Flag = "Name",
    Callback = function(Value)
        _G.Name = Value
    end,
})

local Toggle5 = Tab:CreateToggle({
    Name = "Show Distance",
    CurrentValue = false,
    Flag = "Distance",
    Callback = function(Value)
        _G.Distance = Value
    end,
})

local Toggle5 = Tab:CreateToggle({
    Name = "Show Skeleton",
    CurrentValue = false,
    Flag = "syuhhjg",
    Callback = function(Value)
        _G.ShowSkel = Value
    end,
})

local Toggle5 = Tab:CreateToggle({
    Name = "Show Look Tracer",
    CurrentValue = false,
    Flag = "jhgfxdghhgh",
    Callback = function(Value)
        _G.Showlt = Value
    end,
})

local Toggle5 = Tab:CreateToggle({
    Name = "Show Head Dot",
    CurrentValue = false,
    Flag = "hgfgfgfgfhjhjh",
    Callback = function(Value)
        _G.Showhd = Value
    end,
})

local Toggle6 = Tab:CreateToggle({
    Name = "Teamcheck",
    CurrentValue = false,
    Flag = "teamcheck",
    Callback = function(Value)
        _G.teamcheck = Value
    end,
})

local Label1 = Tab:CreateLabel("Color Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local ColorPicker3 = Tab:CreateColorPicker({
    Name = "Box Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "boxColor",
    Callback = function(Value)
        _G.boxColor = Value
    end
})

local ColorPicker3 = Tab:CreateColorPicker({
    Name = "Health Bar Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "bbbbhbjycoxColor",
    Callback = function(Value)
        _G.HealthBarColor = Value
    end
})

local ColorPicker5 = Tab:CreateColorPicker({
    Name = "Tracer Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "TracerColor",
    Callback = function(Value)
        _G.TracerColor = Value
    end
})

local ColorPicker6 = Tab:CreateColorPicker({
    Name = "Text Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "textc",
    Callback = function(Value)
        _G.Textsc = Value
    end
})

local ColorPicker7 = Tab:CreateColorPicker({
    Name = "Skeleton Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "Distgfgjancec",
    Callback = function(Value)
        _G.skelcol = Value
    end
})

local ColorPicker7 = Tab:CreateColorPicker({
    Name = "Head Dot Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "Disthgghghhancec",
    Callback = function(Value)
        _G.hdcol = Value
    end
})

local ColorPicker7 = Tab:CreateColorPicker({
    Name = "Distance Color",
    Color = Color3.fromRGB(255, 255, 255),
    Flag = "Distancec",
    Callback = function(Value)
        _G.ltcol = Value
    end
})

local Label2 = Tab:CreateLabel("Transparency Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Slider1 = Tab:CreateSlider({
    Name = "Box Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxTransparency",
    Callback = function(Value)
        _G.boxTransparency = Value
    end,
})

local Slider3 = Tab:CreateSlider({
    Name = "Health Bar Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarTransparency",
    Callback = function(Value)
        _G.HealthBarTransparency = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTransparency",
    Callback = function(Value)
        _G.TracerTransparency = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Skeleton Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerThhhjghransparency",
    Callback = function(Value)
        _G.skeltranspa = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Head Dot Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTransparency",
    Callback = function(Value)
        _G.hdtranspa = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Look Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracergghgjhvbgvhTransparency",
    Callback = function(Value)
        _G.lttranspa = Value
    end,
})

local Label3 = Tab:CreateLabel("Thickness Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Slider5 = Tab:CreateSlider({
    Name = "Box Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "boxThickness",
    Callback = function(Value)
        _G.boxThickness = Value
    end,
})

local Slider6 = Tab:CreateSlider({
    Name = "Health Bar Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "HealthBarThickness",
    Callback = function(Value)
        _G.HealthBarThickness = Value
    end,
})

local Slider7 = Tab:CreateSlider({
    Name = "Tracer Thickness",
    Range = {0, 10},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerThickness",
    Callback = function(Value)
        _G.TracerThickness = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Skeleton Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerghjkjhgfghjkkjhhhhhjhjhTransparency",
    Callback = function(Value)
        _G.skelthick = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Head Dot Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracerTjmgntfbyvngfransparency",
    Callback = function(Value)
        _G.hdthick = Value
    end,
})

local Slider4 = Tab:CreateSlider({
    Name = "Look Tracer Transparency",
    Range = {0, 1},
    Increment = .05,
    Suffix = "",
    CurrentValue = 1,
    Flag = "TracgfhghjhuherTransparency",
    Callback = function(Value)
        _G.ltthick = Value
    end,
})

local Slider8 = Tab:CreateSlider({
    Name = "Text Size",
    Range = {5, 30},
    Increment = .05,
    Suffix = "",
    CurrentValue = 13,
    Flag = "Namhhhghes",
    Callback = function(Value)
        _G.Textss = Value
    end,
})

local Label4 = Tab:CreateLabel("Other Settings", 4483362458, Color3.fromRGB(0, 0, 0), false)

local Dropdown2 = Tab:CreateDropdown({
    Name = "Health Bar Position",
    Options = {"Left", "Right"},
    CurrentOption = {"Left"},
    MultipleOptions = false,
    Flag = "HealthBarPosition",
    Callback = function(Options)
        _G.HealthBarPosition = Options[1]
    end,
})

local Dropdown3 = Tab:CreateDropdown({
    Name = "Tracer From",
    Options = {"Bottom", "Middle", "Top"},
    CurrentOption = {"Bottom"},
    MultipleOptions = false,
    Flag = "TracerFrom",
    Callback = function(Options)
        _G.TracerFrom = Options[1]
    end,
})

local Dropdown3 = Tab:CreateDropdown({
    Name = "Tracer From",
    Options = {"Bottom", "Middle", "Top"},
    CurrentOption = {"Bottom"},
    MultipleOptions = false,
    Flag = "TracerFrom",
    Callback = function(Options)
        
    end,
})

Rayfield:LoadConfiguration()
