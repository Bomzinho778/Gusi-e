local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Seven7-lua/Roblox/refs/heads/main/Librarys/Orion/Orion.lua')))()

local PLAYER = game.Players.LocalPlayer
local CurrentCam = game.Workspace.CurrentCamera
local WorldToViewportPoint = CurrentCam.WorldToViewportPoint
local UIS = game:GetService("UserInputService")
local mouseLocation = function() return UIS:GetMouseLocation() end


local Window = OrionLib:MakeWindow({Name = "Aimbot Settings", HidePremium = false, IntroEnabled = true})

local FovCircle = Drawing.new("Circle")
FovCircle.Thickness = 2
FovCircle.Filled = false
FovCircle.Transparency = 0.7
FovCircle.Color = Color3.fromRGB(100, 0, 100)

local DeleteMob = {
    Aimbot = {
        Enabled = true,
        TeamCheck = false,
        WallCheck = false,
        ShowFov = false,
        Fov = 100,
        Smoothing = 0.5,
        AimPart = "Head",
        Thickness = 1,
        FovFillColor = Color3.fromRGB(100, 0, 100),
        FovColor = Color3.fromRGB(100, 0, 100),
        FovFillTransparency = 1,
        FovTransparency = 0,
        FovAtMouse = false,
    }
}

local AimbotTab = Window:MakeTab({
    Name = "Aimbot Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

AimbotTab:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(Value)
        DeleteMob.Aimbot.Enabled = Value
    end
})

AimbotTab:AddToggle({
    Name = "Enable Team Check",
    Default = false,
    Callback = function(Value)
        DeleteMob.Aimbot.TeamCheck = Value
    end
})

AimbotTab:AddToggle({
    Name = "Enable Wall Check",
    Default = false,
    Callback = function(Value)
        DeleteMob.Aimbot.WallCheck = Value
    end
})

AimbotTab:AddToggle({
    Name = "Show FOV",
    Default = false,
    Callback = function(Value)
        DeleteMob.Aimbot.ShowFov = Value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Size",
    Min = 5,
    Max = 200,
    Default = 75,
    Color = Color3.fromRGB(100, 0, 100),
    Increment = 1,
    Callback = function(Value)
        DeleteMob.Aimbot.Fov = Value
    end
})

AimbotTab:AddSlider({
    Name = "Smoothing",
    Min = 0,
    Max = 2,
    Default = 0.5,
    Color = Color3.fromRGB(100, 0, 100),
    Increment = 0.1,
    Callback = function(Value)
        DeleteMob.Aimbot.Smoothing = Value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Thickness",
    Min = 1,
    Max = 10,
    Default = 1,
    Color = Color3.fromRGB(100, 0, 100),
    Increment = 1,
    Callback = function(Value)
        DeleteMob.Aimbot.Thickness = Value
    end
})

AimbotTab:AddColorPicker({
    Name = "FOV Color",
    Default = Color3.fromRGB(100, 0, 100),
    Callback = function(Value)
        DeleteMob.Aimbot.FovColor = Value
    end
})

AimbotTab:AddColorPicker({
    Name = "FOV Fill Color",
    Default = Color3.fromRGB(100, 0, 100),
    Callback = function(Value)
        DeleteMob.Aimbot.FovFillColor = Value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Transparency",
    Min = 0,
    Max = 1,
    Default = 0,
    Color = Color3.fromRGB(100, 0, 100),
    Increment = 0.1,
    Callback = function(Value)
        DeleteMob.Aimbot.FovTransparency = Value
    end
})

AimbotTab:AddSlider({
    Name = "FOV Fill Transparency",
    Min = 0,
    Max = 1,
    Default = 1,
    Color = Color3.fromRGB(100, 0, 100),
    Increment = 0.1,
    Callback = function(Value)
        DeleteMob.Aimbot.FovFillTransparency = Value
    end
})

AimbotTab:AddToggle({
    Name = "FOV at Mouse",
    Default = true,
    Callback = function(Value)
        DeleteMob.Aimbot.FovAtMouse = Value
    end
})

AimbotTab:AddDropdown({
	Name = "AimPart",
	Default = "Head",
	Options = {"Head", "Humanoid"},
	Callback = function(Value)
		DeleteMob.Aimbot.AimPart = Value
	end    
})

function isVisible(p, ...)
    if not (DeleteMob.Aimbot.WallCheck) then
        return true
    end
    return #CurrentCam:GetPartsObscuringTarget({p}, {CurrentCam, PLAYER.Character, ...}) == 0
end

function CameraGetClosestToMouse(Fov)
    local AimFov = Fov
    local targetPos = nil
    local referencePos = DeleteMob.Aimbot.FovAtMouse and mouseLocation() or Vector2.new(CurrentCam.ViewportSize.X / 2, CurrentCam.ViewportSize.Y / 2)

    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v ~= PLAYER then
            if DeleteMob.Aimbot.TeamCheck == true then
                if v.Character and v.Character:FindFirstChild(DeleteMob.Aimbot.AimPart) and v.Character.Humanoid and v.Character.Humanoid.Health > 0 and not (v.Team == PLAYER.Team) then
                    local screen_pos, on_screen = WorldToViewportPoint(CurrentCam, v.Character[DeleteMob.Aimbot.AimPart].Position)
                    local screen_pos_2D = Vector2.new(screen_pos.X, screen_pos.Y)
                    local new_magnitude = (screen_pos_2D - referencePos).Magnitude
                    if on_screen and new_magnitude < AimFov and isVisible(v.Character[DeleteMob.Aimbot.AimPart].Position, v.Character.Head.Parent) then
                        AimFov = new_magnitude
                        targetPos = v
                    end
                end
            else
                if v.Character and v.Character:FindFirstChild(DeleteMob.Aimbot.AimPart) and v.Character.Humanoid and v.Character.Humanoid.Health > 0 then
                    local screen_pos, on_screen = WorldToViewportPoint(CurrentCam, v.Character[DeleteMob.Aimbot.AimPart].Position)
                    local screen_pos_2D = Vector2.new(screen_pos.X, screen_pos.Y)
                    local new_magnitude = (screen_pos_2D - referencePos).Magnitude
                    if on_screen and new_magnitude < AimFov and isVisible(v.Character[DeleteMob.Aimbot.AimPart].Position, v.Character.Head.Parent) then
                        AimFov = new_magnitude
                        targetPos = v
                    end
                end
            end
        end
    end
    return targetPos
end

local function aimAt(pos, smooth)
    local AimPart = pos.Character:FindFirstChild(DeleteMob.Aimbot.AimPart)
    if AimPart then
        local LookAt = nil
        local Distance = math.floor(0.5 + (PLAYER.Character:FindFirstChild"HumanoidRootPart".Position - pos.Character:FindFirstChild"HumanoidRootPart".Position).magnitude)
        if Distance > 100 then
            local distChangeBig = Distance / 10
            LookAt = CurrentCam.CFrame:PointToWorldSpace(Vector3.new(0, 0, -smooth * distChangeBig)):Lerp(AimPart.Position, .01)
        else
            local distChangeSmall = Distance / 10
            LookAt = CurrentCam.CFrame:PointToWorldSpace(Vector3.new(0, 0, -smooth * distChangeSmall)):Lerp(AimPart.Position, .01)
        end
        CurrentCam.CFrame = CFrame.lookAt(CurrentCam.CFrame.Position, LookAt)
    end
end

local function drawFov(radius)
    FovCircle.Radius = radius
    local referencePos = DeleteMob.Aimbot.FovAtMouse and mouseLocation() or Vector2.new(CurrentCam.ViewportSize.X / 2, CurrentCam.ViewportSize.Y / 2)
    FovCircle.Position = referencePos
end

game:GetService("RunService").RenderStepped:Connect(function()
    if DeleteMob.Aimbot.ShowFov then
        drawFov(DeleteMob.Aimbot.Fov)
    end

    if DeleteMob.Aimbot.Enabled then
        local target = CameraGetClosestToMouse(DeleteMob.Aimbot.Fov)
        if target then
            aimAt(target, DeleteMob.Aimbot.Smoothing)
        end
    end
end)

OrionLib:Init()
